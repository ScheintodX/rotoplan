
cube-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005364  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800555c  0800555c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800555c  0800555c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800555c  0800555c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  080055d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080055d4  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001082e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002343  00000000  00000000  000308c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  000339d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133e8  00000000  00000000  000346b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee07  00000000  00000000  00047aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069f03  00000000  00000000  000568a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  000c07aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  000c0848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800540c 	.word	0x0800540c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800540c 	.word	0x0800540c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <blink>:
#include "stm32f0xx_hal.h"

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim16;

void blink( TIM_HandleTypeDef *tim ){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_2);
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <blink+0x1c>)
 800023e:	2104      	movs	r1, #4
 8000240:	0018      	movs	r0, r3
 8000242:	f001 fca5 	bl	8001b90 <HAL_GPIO_TogglePin>
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	b002      	add	sp, #8
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	48000400 	.word	0x48000400

08000254 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ blink( htim ); }
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0018      	movs	r0, r3
 8000260:	f7ff ffe8 	bl	8000234 <blink>
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bd80      	pop	{r7, pc}

0800026c <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim){ blink( htim ); }
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){ blink( htim ); }
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f7ff ffdc 	bl	8000234 <blink>
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	46bd      	mov	sp, r7
 8000280:	b002      	add	sp, #8
 8000282:	bd80      	pop	{r7, pc}

08000284 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ blink( htim ); }
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	0018      	movs	r0, r3
 8000290:	f7ff ffd0 	bl	8000234 <blink>
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}

0800029c <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim){ blink( htim ); }
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){ blink( htim ); }
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	0018      	movs	r0, r3
 80002a8:	f7ff ffc4 	bl	8000234 <blink>
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	46bd      	mov	sp, r7
 80002b0:	b002      	add	sp, #8
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <HAL_TIM_TriggerCallback>:
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim){ blink( htim ); }
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){ blink( htim ); }
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	0018      	movs	r0, r3
 80002c0:	f7ff ffb8 	bl	8000234 <blink>
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b002      	add	sp, #8
 80002ca:	bd80      	pop	{r7, pc}

080002cc <Setup>:
		HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_2);
	}
}
*/

void Setup(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim16);
 80002d0:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <Setup+0x7c>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f002 f978 	bl	80025c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80002d8:	4b1c      	ldr	r3, [pc, #112]	; (800034c <Setup+0x80>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f002 f930 	bl	8002540 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <Setup+0x80>)
 80002e2:	2100      	movs	r1, #0
 80002e4:	0018      	movs	r0, r3
 80002e6:	f002 fb1d 	bl	8002924 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <Setup+0x80>)
 80002ec:	2104      	movs	r1, #4
 80002ee:	0018      	movs	r0, r3
 80002f0:	f002 fb18 	bl	8002924 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <Setup+0x80>)
 80002f6:	2108      	movs	r1, #8
 80002f8:	0018      	movs	r0, r3
 80002fa:	f002 fb13 	bl	8002924 <HAL_TIM_PWM_Start_IT>
	setvbuf(stdin, NULL, _IONBF, 0);
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <Setup+0x84>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6858      	ldr	r0, [r3, #4]
 8000304:	2300      	movs	r3, #0
 8000306:	2202      	movs	r2, #2
 8000308:	2100      	movs	r1, #0
 800030a:	f004 f829 	bl	8004360 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <Setup+0x84>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6898      	ldr	r0, [r3, #8]
 8000314:	2300      	movs	r3, #0
 8000316:	2202      	movs	r2, #2
 8000318:	2100      	movs	r1, #0
 800031a:	f004 f821 	bl	8004360 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <Setup+0x84>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	68d8      	ldr	r0, [r3, #12]
 8000324:	2300      	movs	r3, #0
 8000326:	2202      	movs	r2, #2
 8000328:	2100      	movs	r1, #0
 800032a:	f004 f819 	bl	8004360 <setvbuf>

	hallInit();
 800032e:	f000 f875 	bl	800041c <hallInit>
	motorInit();
 8000332:	f000 fc29 	bl	8000b88 <motorInit>

	printf( "Hello World" );
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <Setup+0x88>)
 8000338:	0018      	movs	r0, r3
 800033a:	f003 fff7 	bl	800432c <iprintf>

	motorStart();
 800033e:	f000 fc45 	bl	8000bcc <motorStart>

}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	200001a4 	.word	0x200001a4
 800034c:	20000098 	.word	0x20000098
 8000350:	2000000c 	.word	0x2000000c
 8000354:	08005424 	.word	0x08005424

08000358 <Loop>:

void Loop(){
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035a:	46c6      	mov	lr, r8
 800035c:	b500      	push	{lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af06      	add	r7, sp, #24

	HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000362:	2390      	movs	r3, #144	; 0x90
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	2120      	movs	r1, #32
 8000368:	0018      	movs	r0, r3
 800036a:	f001 fc11 	bl	8001b90 <HAL_GPIO_TogglePin>

	hall_t pos = hallPos();
 800036e:	f000 f85b 	bl	8000428 <hallPos>
 8000372:	0003      	movs	r3, r0
 8000374:	607b      	str	r3, [r7, #4]
	motor_t mot = HALL2MOT[ pos.val ];
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	003b      	movs	r3, r7
 800037a:	4a24      	ldr	r2, [pc, #144]	; (800040c <Loop+0xb4>)
 800037c:	0089      	lsls	r1, r1, #2
 800037e:	588a      	ldr	r2, [r1, r2]
 8000380:	601a      	str	r2, [r3, #0]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
			(int)pos.val, hal2c( pos.U ), hal2c( pos.V ), hal2c( pos.W  ),
 8000382:	687b      	ldr	r3, [r7, #4]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
 8000384:	001e      	movs	r6, r3
			(int)pos.val, hal2c( pos.U ), hal2c( pos.V ), hal2c( pos.W  ),
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	07db      	lsls	r3, r3, #31
 800038c:	0fdb      	lsrs	r3, r3, #31
 800038e:	b2db      	uxtb	r3, r3
 8000390:	001a      	movs	r2, r3
 8000392:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <Loop+0xb8>)
 8000394:	5c9b      	ldrb	r3, [r3, r2]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
 8000396:	469c      	mov	ip, r3
			(int)pos.val, hal2c( pos.U ), hal2c( pos.V ), hal2c( pos.W  ),
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	079b      	lsls	r3, r3, #30
 800039e:	0fdb      	lsrs	r3, r3, #31
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	001a      	movs	r2, r3
 80003a4:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <Loop+0xb8>)
 80003a6:	5c9b      	ldrb	r3, [r3, r2]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
 80003a8:	4698      	mov	r8, r3
			(int)pos.val, hal2c( pos.U ), hal2c( pos.V ), hal2c( pos.W  ),
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	075b      	lsls	r3, r3, #29
 80003b0:	0fdb      	lsrs	r3, r3, #31
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	001a      	movs	r2, r3
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <Loop+0xb8>)
 80003b8:	5c9b      	ldrb	r3, [r3, r2]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
 80003ba:	001a      	movs	r2, r3
			(int)mot.val, mot2c( mot.A ), mot2c( mot.B ), mot2c( mot.C  )
 80003bc:	003b      	movs	r3, r7
 80003be:	681b      	ldr	r3, [r3, #0]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
 80003c0:	0019      	movs	r1, r3
			(int)mot.val, mot2c( mot.A ), mot2c( mot.B ), mot2c( mot.C  )
 80003c2:	003b      	movs	r3, r7
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	0018      	movs	r0, r3
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <Loop+0xbc>)
 80003ca:	5c1b      	ldrb	r3, [r3, r0]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
 80003cc:	001c      	movs	r4, r3
			(int)mot.val, mot2c( mot.A ), mot2c( mot.B ), mot2c( mot.C  )
 80003ce:	003b      	movs	r3, r7
 80003d0:	785b      	ldrb	r3, [r3, #1]
 80003d2:	0018      	movs	r0, r3
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <Loop+0xbc>)
 80003d6:	5c1b      	ldrb	r3, [r3, r0]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
 80003d8:	001d      	movs	r5, r3
			(int)mot.val, mot2c( mot.A ), mot2c( mot.B ), mot2c( mot.C  )
 80003da:	003b      	movs	r3, r7
 80003dc:	789b      	ldrb	r3, [r3, #2]
 80003de:	0018      	movs	r0, r3
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <Loop+0xbc>)
 80003e2:	5c1b      	ldrb	r3, [r3, r0]
	printf( "%1x:%c%c%c -> %06x:%c%c%c\n", 
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <Loop+0xc0>)
 80003e6:	9304      	str	r3, [sp, #16]
 80003e8:	9503      	str	r5, [sp, #12]
 80003ea:	9402      	str	r4, [sp, #8]
 80003ec:	9101      	str	r1, [sp, #4]
 80003ee:	9200      	str	r2, [sp, #0]
 80003f0:	4643      	mov	r3, r8
 80003f2:	4662      	mov	r2, ip
 80003f4:	0031      	movs	r1, r6
 80003f6:	f003 ff99 	bl	800432c <iprintf>
	);
	//motorMot( mot );
	HAL_Delay (100);   /* Insert delay 100 ms */
 80003fa:	2064      	movs	r0, #100	; 0x64
 80003fc:	f000 fee6 	bl	80011cc <HAL_Delay>
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	b002      	add	sp, #8
 8000406:	bc80      	pop	{r7}
 8000408:	46b8      	mov	r8, r7
 800040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800040c:	08005478 	.word	0x08005478
 8000410:	0800544c 	.word	0x0800544c
 8000414:	08005450 	.word	0x08005450
 8000418:	08005430 	.word	0x08005430

0800041c <hallInit>:
#include "hall.h"
#include "main.h"

void hallInit(){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	//noop. already done by main init
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <hallPos>:

hall_t hallPos(){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	hall_t res={0};
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
	res.U = HAL_GPIO_ReadPin( H1_GPIO_Port, H1_Pin );
 8000432:	2380      	movs	r3, #128	; 0x80
 8000434:	021a      	lsls	r2, r3, #8
 8000436:	2390      	movs	r3, #144	; 0x90
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	0011      	movs	r1, r2
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fb6d 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000442:	0003      	movs	r3, r0
 8000444:	1e5a      	subs	r2, r3, #1
 8000446:	4193      	sbcs	r3, r2
 8000448:	b2da      	uxtb	r2, r3
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2101      	movs	r1, #1
 800044e:	400a      	ands	r2, r1
 8000450:	0010      	movs	r0, r2
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	2101      	movs	r1, #1
 8000456:	438a      	bics	r2, r1
 8000458:	1c11      	adds	r1, r2, #0
 800045a:	1c02      	adds	r2, r0, #0
 800045c:	430a      	orrs	r2, r1
 800045e:	701a      	strb	r2, [r3, #0]
	res.V = HAL_GPIO_ReadPin( H2_GPIO_Port, H2_Pin );
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <hallPos+0x98>)
 8000462:	2108      	movs	r1, #8
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fb59 	bl	8001b1c <HAL_GPIO_ReadPin>
 800046a:	0003      	movs	r3, r0
 800046c:	1e5a      	subs	r2, r3, #1
 800046e:	4193      	sbcs	r3, r2
 8000470:	b2da      	uxtb	r2, r3
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2101      	movs	r1, #1
 8000476:	400a      	ands	r2, r1
 8000478:	1890      	adds	r0, r2, r2
 800047a:	781a      	ldrb	r2, [r3, #0]
 800047c:	2102      	movs	r1, #2
 800047e:	438a      	bics	r2, r1
 8000480:	1c11      	adds	r1, r2, #0
 8000482:	1c02      	adds	r2, r0, #0
 8000484:	430a      	orrs	r2, r1
 8000486:	701a      	strb	r2, [r3, #0]
	res.W = HAL_GPIO_ReadPin( H3_GPIO_Port, H3_Pin );
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	00db      	lsls	r3, r3, #3
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <hallPos+0x98>)
 800048e:	0019      	movs	r1, r3
 8000490:	0010      	movs	r0, r2
 8000492:	f001 fb43 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000496:	0003      	movs	r3, r0
 8000498:	1e5a      	subs	r2, r3, #1
 800049a:	4193      	sbcs	r3, r2
 800049c:	b2da      	uxtb	r2, r3
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2101      	movs	r1, #1
 80004a2:	400a      	ands	r2, r1
 80004a4:	0090      	lsls	r0, r2, #2
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	2104      	movs	r1, #4
 80004aa:	438a      	bics	r2, r1
 80004ac:	1c11      	adds	r1, r2, #0
 80004ae:	1c02      	adds	r2, r0, #0
 80004b0:	430a      	orrs	r2, r1
 80004b2:	701a      	strb	r2, [r3, #0]
	return res;
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	48000400 	.word	0x48000400

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fe1c 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80f 	bl	80004ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fa42 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 fa10 	bl	80008f8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004d8:	f000 f8b6 	bl	8000648 <MX_TIM1_Init>
  MX_ADC_Init();
 80004dc:	f000 f858 	bl	8000590 <MX_ADC_Init>
  MX_TIM16_Init();
 80004e0:	f000 f984 	bl	80007ec <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  Setup();
 80004e4:	f7ff fef2 	bl	80002cc <Setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	Loop();
 80004e8:	f7ff ff36 	bl	8000358 <Loop>
 80004ec:	e7fc      	b.n	80004e8 <main+0x24>

080004ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ee:	b590      	push	{r4, r7, lr}
 80004f0:	b091      	sub	sp, #68	; 0x44
 80004f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f4:	2410      	movs	r4, #16
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2330      	movs	r3, #48	; 0x30
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f003 ff0c 	bl	800431c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	003b      	movs	r3, r7
 8000506:	0018      	movs	r0, r3
 8000508:	2310      	movs	r3, #16
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f003 ff05 	bl	800431c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2212      	movs	r2, #18
 8000518:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2201      	movs	r2, #1
 8000524:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2210      	movs	r2, #16
 800052a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2210      	movs	r2, #16
 8000530:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2202      	movs	r2, #2
 8000536:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	22a0      	movs	r2, #160	; 0xa0
 8000542:	0392      	lsls	r2, r2, #14
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	187b      	adds	r3, r7, r1
 800054e:	0018      	movs	r0, r3
 8000550:	f001 fb3a 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000558:	f000 fb10 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	003b      	movs	r3, r7
 800055e:	2207      	movs	r2, #7
 8000560:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	003b      	movs	r3, r7
 8000564:	2202      	movs	r2, #2
 8000566:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000568:	003b      	movs	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	003b      	movs	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000574:	003b      	movs	r3, r7
 8000576:	2101      	movs	r1, #1
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fe3f 	bl	80021fc <HAL_RCC_ClockConfig>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000582:	f000 fafb 	bl	8000b7c <Error_Handler>
  }
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b011      	add	sp, #68	; 0x44
 800058c:	bd90      	pop	{r4, r7, pc}
	...

08000590 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	0018      	movs	r0, r3
 800059a:	230c      	movs	r3, #12
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f003 febc 	bl	800431c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <MX_ADC_Init+0xb0>)
 80005a6:	4a27      	ldr	r2, [pc, #156]	; (8000644 <MX_ADC_Init+0xb4>)
 80005a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <MX_ADC_Init+0xb0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_ADC_Init+0xb0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_ADC_Init+0xb0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC_Init+0xb0>)
 80005be:	2201      	movs	r2, #1
 80005c0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_ADC_Init+0xb0>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC_Init+0xb0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_ADC_Init+0xb0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC_Init+0xb0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_ADC_Init+0xb0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC_Init+0xb0>)
 80005e2:	22c2      	movs	r2, #194	; 0xc2
 80005e4:	32ff      	adds	r2, #255	; 0xff
 80005e6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC_Init+0xb0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC_Init+0xb0>)
 80005f0:	2224      	movs	r2, #36	; 0x24
 80005f2:	2100      	movs	r1, #0
 80005f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC_Init+0xb0>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_ADC_Init+0xb0>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fe08 	bl	8001214 <HAL_ADC_Init>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000608:	f000 fab8 	bl	8000b7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2209      	movs	r2, #9
 8000610:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	0152      	lsls	r2, r2, #5
 8000618:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	0552      	lsls	r2, r2, #21
 8000620:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000622:	1d3a      	adds	r2, r7, #4
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_ADC_Init+0xb0>)
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 ff33 	bl	8001494 <HAL_ADC_ConfigChannel>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000632:	f000 faa3 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b004      	add	sp, #16
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	20000164 	.word	0x20000164
 8000644:	40012400 	.word	0x40012400

08000648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	2348      	movs	r3, #72	; 0x48
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f003 fe5f 	bl	800431c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065e:	2340      	movs	r3, #64	; 0x40
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2308      	movs	r3, #8
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f003 fe57 	bl	800431c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066e:	2324      	movs	r3, #36	; 0x24
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	231c      	movs	r3, #28
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f003 fe4f 	bl	800431c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	0018      	movs	r0, r3
 8000682:	2320      	movs	r3, #32
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f003 fe48 	bl	800431c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800068c:	4b55      	ldr	r3, [pc, #340]	; (80007e4 <MX_TIM1_Init+0x19c>)
 800068e:	4a56      	ldr	r2, [pc, #344]	; (80007e8 <MX_TIM1_Init+0x1a0>)
 8000690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000692:	4b54      	ldr	r3, [pc, #336]	; (80007e4 <MX_TIM1_Init+0x19c>)
 8000694:	222f      	movs	r2, #47	; 0x2f
 8000696:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b52      	ldr	r3, [pc, #328]	; (80007e4 <MX_TIM1_Init+0x19c>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800069e:	4b51      	ldr	r3, [pc, #324]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80006a0:	22fa      	movs	r2, #250	; 0xfa
 80006a2:	0092      	lsls	r2, r2, #2
 80006a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a6:	4b4f      	ldr	r3, [pc, #316]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ac:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b2:	4b4c      	ldr	r3, [pc, #304]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b8:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 fef0 	bl	80024a0 <HAL_TIM_Base_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80006c4:	f000 fa5a 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c8:	2148      	movs	r1, #72	; 0x48
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0152      	lsls	r2, r2, #5
 80006d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d2:	187a      	adds	r2, r7, r1
 80006d4:	4b43      	ldr	r3, [pc, #268]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80006d6:	0011      	movs	r1, r2
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 fc51 	bl	8002f80 <HAL_TIM_ConfigClockSource>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80006e2:	f000 fa4b 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006e6:	4b3f      	ldr	r3, [pc, #252]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 f811 	bl	8002710 <HAL_TIM_PWM_Init>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80006f2:	f000 fa43 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000704:	187a      	adds	r2, r7, r1
 8000706:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <MX_TIM1_Init+0x19c>)
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f003 f83c 	bl	8003788 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000714:	f000 fa32 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000718:	2124      	movs	r1, #36	; 0x24
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2260      	movs	r2, #96	; 0x60
 800071e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	22fa      	movs	r2, #250	; 0xfa
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000746:	1879      	adds	r1, r7, r1
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <MX_TIM1_Init+0x19c>)
 800074a:	2200      	movs	r2, #0
 800074c:	0018      	movs	r0, r3
 800074e:	f002 fb51 	bl	8002df4 <HAL_TIM_PWM_ConfigChannel>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000756:	f000 fa11 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.Pulse = 100;
 800075a:	2124      	movs	r1, #36	; 0x24
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2264      	movs	r2, #100	; 0x64
 8000760:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000762:	1879      	adds	r1, r7, r1
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_TIM1_Init+0x19c>)
 8000766:	2204      	movs	r2, #4
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fb43 	bl	8002df4 <HAL_TIM_PWM_ConfigChannel>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000772:	f000 fa03 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.Pulse = 700;
 8000776:	2124      	movs	r1, #36	; 0x24
 8000778:	187b      	adds	r3, r7, r1
 800077a:	22af      	movs	r2, #175	; 0xaf
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000780:	1879      	adds	r1, r7, r1
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_TIM1_Init+0x19c>)
 8000784:	2208      	movs	r2, #8
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fb34 	bl	8002df4 <HAL_TIM_PWM_ConfigChannel>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000790:	f000 f9f4 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	0192      	lsls	r2, r2, #6
 80007b8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c0:	1d3a      	adds	r2, r7, #4
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f003 f836 	bl	8003838 <HAL_TIMEx_ConfigBreakDeadTime>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80007d0:	f000 f9d4 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <MX_TIM1_Init+0x19c>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fad2 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b016      	add	sp, #88	; 0x58
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000098 	.word	0x20000098
 80007e8:	40012c00 	.word	0x40012c00

080007ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	; 0x40
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f2:	2324      	movs	r3, #36	; 0x24
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	231c      	movs	r3, #28
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 fd8d 	bl	800431c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	0018      	movs	r0, r3
 8000806:	2320      	movs	r3, #32
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f003 fd86 	bl	800431c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000810:	4b36      	ldr	r3, [pc, #216]	; (80008ec <MX_TIM16_Init+0x100>)
 8000812:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <MX_TIM16_Init+0x104>)
 8000814:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2399;
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_TIM16_Init+0x100>)
 8000818:	4a36      	ldr	r2, [pc, #216]	; (80008f4 <MX_TIM16_Init+0x108>)
 800081a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_TIM16_Init+0x100>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000;
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <MX_TIM16_Init+0x100>)
 8000824:	22fa      	movs	r2, #250	; 0xfa
 8000826:	00d2      	lsls	r2, r2, #3
 8000828:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <MX_TIM16_Init+0x100>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000830:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <MX_TIM16_Init+0x100>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_TIM16_Init+0x100>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <MX_TIM16_Init+0x100>)
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fe2e 	bl	80024a0 <HAL_TIM_Base_Init>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000848:	f000 f998 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_TIM16_Init+0x100>)
 800084e:	0018      	movs	r0, r3
 8000850:	f001 ff06 	bl	8002660 <HAL_TIM_OC_Init>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000858:	f000 f990 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800085c:	2124      	movs	r1, #36	; 0x24
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	22c8      	movs	r2, #200	; 0xc8
 8000868:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	1879      	adds	r1, r7, r1
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_TIM16_Init+0x100>)
 800088c:	2200      	movs	r2, #0
 800088e:	0018      	movs	r0, r3
 8000890:	f002 fa58 	bl	8002d44 <HAL_TIM_OC_ConfigChannel>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000898:	f000 f970 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0192      	lsls	r2, r2, #6
 80008c0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80008c8:	1d3a      	adds	r2, r7, #4
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_TIM16_Init+0x100>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 ffb2 	bl	8003838 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 80008d8:	f000 f950 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <MX_TIM16_Init+0x100>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fa4e 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b010      	add	sp, #64	; 0x40
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001a4 	.word	0x200001a4
 80008f0:	40014400 	.word	0x40014400
 80008f4:	0000095f 	.word	0x0000095f

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART2_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_USART2_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000904:	22e1      	movs	r2, #225	; 0xe1
 8000906:	0252      	lsls	r2, r2, #9
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800093c:	0018      	movs	r0, r3
 800093e:	f002 ffe9 	bl	8003914 <HAL_UART_Init>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f919 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000e0 	.word	0x200000e0
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b08b      	sub	sp, #44	; 0x2c
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	2414      	movs	r4, #20
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f003 fcd7 	bl	800431c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b66      	ldr	r3, [pc, #408]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0309      	lsls	r1, r1, #12
 8000978:	430a      	orrs	r2, r1
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	031b      	lsls	r3, r3, #12
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098a:	4b5f      	ldr	r3, [pc, #380]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	4b5e      	ldr	r3, [pc, #376]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	03c9      	lsls	r1, r1, #15
 8000994:	430a      	orrs	r2, r1
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4b5b      	ldr	r3, [pc, #364]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	03db      	lsls	r3, r3, #15
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b58      	ldr	r3, [pc, #352]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	4b57      	ldr	r3, [pc, #348]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	4b54      	ldr	r3, [pc, #336]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b51      	ldr	r3, [pc, #324]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b50      	ldr	r3, [pc, #320]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	02c9      	lsls	r1, r1, #11
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	4b4d      	ldr	r3, [pc, #308]	; (8000b08 <MX_GPIO_Init+0x1b0>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	02db      	lsls	r3, r3, #11
 80009d8:	4013      	ands	r3, r2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009de:	2390      	movs	r3, #144	; 0x90
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 f8b5 	bl	8001b56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009ec:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <MX_GPIO_Init+0x1b4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	2104      	movs	r1, #4
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 f8af 	bl	8001b56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80009f8:	23e0      	movs	r3, #224	; 0xe0
 80009fa:	015b      	lsls	r3, r3, #5
 80009fc:	4844      	ldr	r0, [pc, #272]	; (8000b10 <MX_GPIO_Init+0x1b8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	0019      	movs	r1, r3
 8000a02:	f001 f8a8 	bl	8001b56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	0192      	lsls	r2, r2, #6
 8000a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2284      	movs	r2, #132	; 0x84
 8000a12:	0392      	lsls	r2, r2, #14
 8000a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	4a3c      	ldr	r2, [pc, #240]	; (8000b10 <MX_GPIO_Init+0x1b8>)
 8000a20:	0019      	movs	r1, r3
 8000a22:	0010      	movs	r0, r2
 8000a24:	f000 ff0a 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2201      	movs	r2, #1
 8000a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a40:	193a      	adds	r2, r7, r4
 8000a42:	2390      	movs	r3, #144	; 0x90
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 fef7 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_DIAG_Pin */
  GPIO_InitStruct.Pin = EN_DIAG_Pin;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2240      	movs	r2, #64	; 0x40
 8000a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EN_DIAG_GPIO_Port, &GPIO_InitStruct);
 8000a60:	193a      	adds	r2, r7, r4
 8000a62:	2390      	movs	r3, #144	; 0x90
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 fee7 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2204      	movs	r2, #4
 8000a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2201      	movs	r2, #1
 8000a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <MX_GPIO_Init+0x1b4>)
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	0010      	movs	r0, r2
 8000a8e:	f000 fed5 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : H3_Pin H2_Pin */
  GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2281      	movs	r2, #129	; 0x81
 8000a96:	00d2      	lsls	r2, r2, #3
 8000a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2288      	movs	r2, #136	; 0x88
 8000a9e:	0352      	lsls	r2, r2, #13
 8000aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <MX_GPIO_Init+0x1b4>)
 8000aac:	0019      	movs	r1, r3
 8000aae:	0010      	movs	r0, r2
 8000ab0:	f000 fec4 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : H1_Pin */
  GPIO_InitStruct.Pin = H1_Pin;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	0212      	lsls	r2, r2, #8
 8000aba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2288      	movs	r2, #136	; 0x88
 8000ac0:	0352      	lsls	r2, r2, #13
 8000ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8000aca:	193a      	adds	r2, r7, r4
 8000acc:	2390      	movs	r3, #144	; 0x90
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 feb2 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 8000ad8:	0021      	movs	r1, r4
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	22e0      	movs	r2, #224	; 0xe0
 8000ade:	0152      	lsls	r2, r2, #5
 8000ae0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <MX_GPIO_Init+0x1b8>)
 8000af8:	0019      	movs	r1, r3
 8000afa:	0010      	movs	r0, r2
 8000afc:	f000 fe9e 	bl	800183c <HAL_GPIO_Init>

}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b00b      	add	sp, #44	; 0x2c
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48000400 	.word	0x48000400
 8000b10:	48000800 	.word	0x48000800

08000b14 <__io_putchar>:

/* USER CODE BEGIN 4 */

const char NL[] = "\r\n";
int __io_putchar(int ch) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if( ch == '\n' ){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b0a      	cmp	r3, #10
 8000b20:	d106      	bne.n	8000b30 <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t *)&NL, 2, 100);
 8000b22:	4909      	ldr	r1, [pc, #36]	; (8000b48 <__io_putchar+0x34>)
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <__io_putchar+0x38>)
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	2202      	movs	r2, #2
 8000b2a:	f002 ff47 	bl	80039bc <HAL_UART_Transmit>
 8000b2e:	e005      	b.n	8000b3c <__io_putchar+0x28>
  } else {
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8000b30:	1d39      	adds	r1, r7, #4
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <__io_putchar+0x38>)
 8000b34:	2364      	movs	r3, #100	; 0x64
 8000b36:	2201      	movs	r2, #1
 8000b38:	f002 ff40 	bl	80039bc <HAL_UART_Transmit>
  }
  return ch;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	08005474 	.word	0x08005474
 8000b4c:	200000e0 	.word	0x200000e0

08000b50 <__io_getchar>:

int __io_getchar(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  uint8_t ch;                                                                                                                                                                                       
  if( HAL_UART_Receive(&huart2, &ch, 1, 0) == HAL_OK ){
 8000b56:	1df9      	adds	r1, r7, #7
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <__io_getchar+0x28>)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f002 ffd7 	bl	8003b10 <HAL_UART_Receive>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d102      	bne.n	8000b6c <__io_getchar+0x1c>
    return ch; 
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	e001      	b.n	8000b70 <__io_getchar+0x20>
  } else {
    return -1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	425b      	negs	r3, r3
  }

}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000e0 	.word	0x200000e0

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <motorInit>:
};

void motorTim(){
}

void motorInit(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	int i;
	for( i=0; i<3; i++ ){
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	e00e      	b.n	8000bb2 <motorInit+0x2a>
		HAL_GPIO_WritePin( PORT_EN[i], PIN_EN[i], GPIO_PIN_RESET );
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <motorInit+0x3c>)
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	58d0      	ldr	r0, [r2, r3]
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <motorInit+0x40>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	0052      	lsls	r2, r2, #1
 8000ba2:	5ad3      	ldrh	r3, [r2, r3]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	f000 ffd5 	bl	8001b56 <HAL_GPIO_WritePin>
	for( i=0; i<3; i++ ){
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	dded      	ble.n	8000b94 <motorInit+0xc>
	}
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	08005498 	.word	0x08005498
 8000bc8:	080054a4 	.word	0x080054a4

08000bcc <motorStart>:

void motorStart(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <motorStart+0x40>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 fdf3 	bl	80027c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <motorStart+0x40>)
 8000bdc:	2104      	movs	r1, #4
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 fdee 	bl	80027c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <motorStart+0x40>)
 8000be6:	2108      	movs	r1, #8
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 fde9 	bl	80027c0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, 0 );
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <motorStart+0x40>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, 0 );
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <motorStart+0x40>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, 0 );
 8000bfe:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <motorStart+0x40>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2200      	movs	r2, #0
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000098 	.word	0x20000098

08000c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	699a      	ldr	r2, [r3, #24]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	619a      	str	r2, [r3, #24]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4013      	ands	r3, r2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	69da      	ldr	r2, [r3, #28]
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0549      	lsls	r1, r1, #21
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	61da      	str	r2, [r3, #28]
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3e:	69da      	ldr	r2, [r3, #28]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	055b      	lsls	r3, r3, #21
 8000c44:	4013      	ands	r3, r2
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b08b      	sub	sp, #44	; 0x2c
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	2414      	movs	r4, #20
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	0018      	movs	r0, r3
 8000c66:	2314      	movs	r3, #20
 8000c68:	001a      	movs	r2, r3
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f003 fb56 	bl	800431c <memset>
  if(hadc->Instance==ADC1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12a      	bne.n	8000cd0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_ADC_MspInit+0x84>)
 8000c7c:	699a      	ldr	r2, [r3, #24]
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_ADC_MspInit+0x84>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	0089      	lsls	r1, r1, #2
 8000c84:	430a      	orrs	r2, r1
 8000c86:	619a      	str	r2, [r3, #24]
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_ADC_MspInit+0x84>)
 8000c8a:	699a      	ldr	r2, [r3, #24]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_ADC_MspInit+0x84>)
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_ADC_MspInit+0x84>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	02c9      	lsls	r1, r1, #11
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_ADC_MspInit+0x84>)
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	02db      	lsls	r3, r3, #11
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2203      	movs	r2, #3
 8000cbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_ADC_MspInit+0x88>)
 8000cc8:	0019      	movs	r1, r3
 8000cca:	0010      	movs	r0, r2
 8000ccc:	f000 fdb6 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b00b      	add	sp, #44	; 0x2c
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40012400 	.word	0x40012400
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <HAL_TIM_Base_MspInit+0x90>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d11e      	bne.n	8000d34 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0109      	lsls	r1, r1, #4
 8000d00:	430a      	orrs	r2, r1
 8000d02:	619a      	str	r2, [r3, #24]
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d06:	699a      	ldr	r2, [r3, #24]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	200d      	movs	r0, #13
 8000d18:	f000 fd5e 	bl	80017d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000d1c:	200d      	movs	r0, #13
 8000d1e:	f000 fd70 	bl	8001802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	200e      	movs	r0, #14
 8000d28:	f000 fd56 	bl	80017d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d2c:	200e      	movs	r0, #14
 8000d2e:	f000 fd68 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d32:	e01a      	b.n	8000d6a <HAL_TIM_Base_MspInit+0x86>
  else if(htim_base->Instance==TIM16)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_TIM_Base_MspInit+0x98>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d115      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d40:	699a      	ldr	r2, [r3, #24]
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0289      	lsls	r1, r1, #10
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	619a      	str	r2, [r3, #24]
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	029b      	lsls	r3, r3, #10
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2015      	movs	r0, #21
 8000d60:	f000 fd3a 	bl	80017d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000d64:	2015      	movs	r0, #21
 8000d66:	f000 fd4c 	bl	8001802 <HAL_NVIC_EnableIRQ>
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40014400 	.word	0x40014400

08000d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	2414      	movs	r4, #20
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	2314      	movs	r3, #20
 8000d90:	001a      	movs	r2, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	f003 fac2 	bl	800431c <memset>
  if(htim->Instance==TIM1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a2b      	ldr	r2, [pc, #172]	; (8000e4c <HAL_TIM_MspPostInit+0xcc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d126      	bne.n	8000df0 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_TIM_MspPostInit+0xd0>)
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_TIM_MspPostInit+0xd0>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0289      	lsls	r1, r1, #10
 8000dac:	430a      	orrs	r2, r1
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_TIM_MspPostInit+0xd0>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	22e0      	movs	r2, #224	; 0xe0
 8000dc2:	00d2      	lsls	r2, r2, #3
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	0021      	movs	r1, r4
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2202      	movs	r2, #2
 8000dcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2202      	movs	r2, #2
 8000dde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	187a      	adds	r2, r7, r1
 8000de2:	2390      	movs	r3, #144	; 0x90
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 fd27 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000dee:	e029      	b.n	8000e44 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM16)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_TIM_MspPostInit+0xd4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d124      	bne.n	8000e44 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_TIM_MspPostInit+0xd0>)
 8000dfc:	695a      	ldr	r2, [r3, #20]
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_TIM_MspPostInit+0xd0>)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	02c9      	lsls	r1, r1, #11
 8000e04:	430a      	orrs	r2, r1
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_TIM_MspPostInit+0xd0>)
 8000e0a:	695a      	ldr	r2, [r3, #20]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	02db      	lsls	r3, r3, #11
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e16:	2114      	movs	r1, #20
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	0052      	lsls	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2202      	movs	r2, #2
 8000e24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2202      	movs	r2, #2
 8000e36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_TIM_MspPostInit+0xd8>)
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	0010      	movs	r0, r2
 8000e40:	f000 fcfc 	bl	800183c <HAL_GPIO_Init>
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b00b      	add	sp, #44	; 0x2c
 8000e4a:	bd90      	pop	{r4, r7, pc}
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40014400 	.word	0x40014400
 8000e58:	48000400 	.word	0x48000400

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b08b      	sub	sp, #44	; 0x2c
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	2414      	movs	r4, #20
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	2314      	movs	r3, #20
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f003 fa54 	bl	800431c <memset>
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_UART_MspInit+0x90>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d132      	bne.n	8000ee4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000e80:	69da      	ldr	r2, [r3, #28]
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0289      	lsls	r1, r1, #10
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	61da      	str	r2, [r3, #28]
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000e8e:	69da      	ldr	r2, [r3, #28]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	0289      	lsls	r1, r1, #10
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	615a      	str	r2, [r3, #20]
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	029b      	lsls	r3, r3, #10
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb6:	0021      	movs	r1, r4
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	187a      	adds	r2, r7, r1
 8000ed8:	2390      	movs	r3, #144	; 0x90
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 fcac 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b00b      	add	sp, #44	; 0x2c
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f93c 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 fdf4 	bl	8002b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	20000098 	.word	0x20000098

08000f3c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <TIM1_CC_IRQHandler+0x14>)
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 fde8 	bl	8002b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	20000098 	.word	0x20000098

08000f54 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

//    HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_2);

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <TIM16_IRQHandler+0x14>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f001 fddc 	bl	8002b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	200001a4 	.word	0x200001a4

08000f6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e00a      	b.n	8000f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7e:	f7ff fde7 	bl	8000b50 <__io_getchar>
 8000f82:	0001      	movs	r1, r0
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	60ba      	str	r2, [r7, #8]
 8000f8a:	b2ca      	uxtb	r2, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbf0      	blt.n	8000f7e <_read+0x12>
  }

  return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b006      	add	sp, #24
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e009      	b.n	8000fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fda7 	bl	8000b14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf1      	blt.n	8000fb8 <_write+0x12>
  }
  return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b006      	add	sp, #24
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_close>:

int _close(int file)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	425b      	negs	r3, r3
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	0192      	lsls	r2, r2, #6
 8001002:	605a      	str	r2, [r3, #4]
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <_isatty>:

int _isatty(int file)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f003 f92e 	bl	80042c8 <__errno>
 800106c:	0003      	movs	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	2301      	movs	r3, #1
 8001074:	425b      	negs	r3, r3
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	18d2      	adds	r2, r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <_sbrk+0x64>)
 8001088:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b006      	add	sp, #24
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20002000 	.word	0x20002000
 8001098:	00000400 	.word	0x00000400
 800109c:	2000008c 	.word	0x2000008c
 80010a0:	20000200 	.word	0x20000200

080010a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490e      	ldr	r1, [pc, #56]	; (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0b      	ldr	r4, [pc, #44]	; (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010da:	f7ff ffe3 	bl	80010a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010de:	f003 f8f9 	bl	80042d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e2:	f7ff f9ef 	bl	80004c4 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   r0, =_estack
 80010e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010f4:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 80010f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010fc:	20000200 	.word	0x20000200

08001100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_IRQHandler>
	...

08001104 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_Init+0x24>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_Init+0x24>)
 800110e:	2110      	movs	r1, #16
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f809 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111a:	f7ff fd79 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_InitTick+0x5c>)
 8001136:	681c      	ldr	r4, [r3, #0]
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_InitTick+0x60>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	0019      	movs	r1, r3
 800113e:	23fa      	movs	r3, #250	; 0xfa
 8001140:	0098      	lsls	r0, r3, #2
 8001142:	f7fe ffeb 	bl	800011c <__udivsi3>
 8001146:	0003      	movs	r3, r0
 8001148:	0019      	movs	r1, r3
 800114a:	0020      	movs	r0, r4
 800114c:	f7fe ffe6 	bl	800011c <__udivsi3>
 8001150:	0003      	movs	r3, r0
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fb65 	bl	8001822 <HAL_SYSTICK_Config>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e00f      	b.n	8001180 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d80b      	bhi.n	800117e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2301      	movs	r3, #1
 800116a:	425b      	negs	r3, r3
 800116c:	2200      	movs	r2, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f000 fb32 	bl	80017d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_InitTick+0x64>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b003      	add	sp, #12
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	20000008 	.word	0x20000008
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <HAL_IncTick+0x1c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	001a      	movs	r2, r3
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_IncTick+0x20>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	18d2      	adds	r2, r2, r3
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_IncTick+0x20>)
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000008 	.word	0x20000008
 80011b4:	200001ec 	.word	0x200001ec

080011b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b02      	ldr	r3, [pc, #8]	; (80011c8 <HAL_GetTick+0x10>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	200001ec 	.word	0x200001ec

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff fff0 	bl	80011b8 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	001a      	movs	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	189b      	adds	r3, r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	f7ff ffe0 	bl	80011b8 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121c:	230f      	movs	r3, #15
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e125      	b.n	800147e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10a      	bne.n	8001250 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2234      	movs	r2, #52	; 0x34
 8001244:	2100      	movs	r1, #0
 8001246:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff fd04 	bl	8000c58 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001254:	2210      	movs	r2, #16
 8001256:	4013      	ands	r3, r2
 8001258:	d000      	beq.n	800125c <HAL_ADC_Init+0x48>
 800125a:	e103      	b.n	8001464 <HAL_ADC_Init+0x250>
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d000      	beq.n	8001268 <HAL_ADC_Init+0x54>
 8001266:	e0fd      	b.n	8001464 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2204      	movs	r2, #4
 8001270:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001272:	d000      	beq.n	8001276 <HAL_ADC_Init+0x62>
 8001274:	e0f6      	b.n	8001464 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127a:	4a83      	ldr	r2, [pc, #524]	; (8001488 <HAL_ADC_Init+0x274>)
 800127c:	4013      	ands	r3, r2
 800127e:	2202      	movs	r2, #2
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2203      	movs	r2, #3
 800128e:	4013      	ands	r3, r2
 8001290:	2b01      	cmp	r3, #1
 8001292:	d112      	bne.n	80012ba <HAL_ADC_Init+0xa6>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d009      	beq.n	80012b6 <HAL_ADC_Init+0xa2>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	401a      	ands	r2, r3
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_Init+0xa6>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_ADC_Init+0xa8>
 80012ba:	2300      	movs	r3, #0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d116      	bne.n	80012ee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2218      	movs	r2, #24
 80012c8:	4393      	bics	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	0899      	lsrs	r1, r3, #2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4964      	ldr	r1, [pc, #400]	; (800148c <HAL_ADC_Init+0x278>)
 80012fa:	400a      	ands	r2, r1
 80012fc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e1b      	ldrb	r3, [r3, #24]
 8001302:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7e5b      	ldrb	r3, [r3, #25]
 8001308:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800130a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7e9b      	ldrb	r3, [r3, #26]
 8001310:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001312:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	2b01      	cmp	r3, #1
 800131a:	d002      	beq.n	8001322 <HAL_ADC_Init+0x10e>
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	015b      	lsls	r3, r3, #5
 8001320:	e000      	b.n	8001324 <HAL_ADC_Init+0x110>
 8001322:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001324:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800132a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d101      	bne.n	8001338 <HAL_ADC_Init+0x124>
 8001334:	2304      	movs	r3, #4
 8001336:	e000      	b.n	800133a <HAL_ADC_Init+0x126>
 8001338:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800133a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2124      	movs	r1, #36	; 0x24
 8001340:	5c5b      	ldrb	r3, [r3, r1]
 8001342:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001344:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	4313      	orrs	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7edb      	ldrb	r3, [r3, #27]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d115      	bne.n	8001380 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7e9b      	ldrb	r3, [r3, #26]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	0252      	lsls	r2, r2, #9
 8001362:	4313      	orrs	r3, r2
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	e00b      	b.n	8001380 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136c:	2220      	movs	r2, #32
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001378:	2201      	movs	r2, #1
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69da      	ldr	r2, [r3, #28]
 8001384:	23c2      	movs	r3, #194	; 0xc2
 8001386:	33ff      	adds	r3, #255	; 0xff
 8001388:	429a      	cmp	r2, r3
 800138a:	d007      	beq.n	800139c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001394:	4313      	orrs	r3, r2
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4313      	orrs	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68d9      	ldr	r1, [r3, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	055b      	lsls	r3, r3, #21
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d01b      	beq.n	80013f0 <HAL_ADC_Init+0x1dc>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d017      	beq.n	80013f0 <HAL_ADC_Init+0x1dc>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d013      	beq.n	80013f0 <HAL_ADC_Init+0x1dc>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d00f      	beq.n	80013f0 <HAL_ADC_Init+0x1dc>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d00b      	beq.n	80013f0 <HAL_ADC_Init+0x1dc>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d007      	beq.n	80013f0 <HAL_ADC_Init+0x1dc>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d003      	beq.n	80013f0 <HAL_ADC_Init+0x1dc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d112      	bne.n	8001416 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2107      	movs	r1, #7
 80013fc:	438a      	bics	r2, r1
 80013fe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6959      	ldr	r1, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	2207      	movs	r2, #7
 800140c:	401a      	ands	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <HAL_ADC_Init+0x27c>)
 800141e:	4013      	ands	r3, r2
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d10b      	bne.n	800143e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001430:	2203      	movs	r2, #3
 8001432:	4393      	bics	r3, r2
 8001434:	2201      	movs	r2, #1
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800143c:	e01c      	b.n	8001478 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001442:	2212      	movs	r2, #18
 8001444:	4393      	bics	r3, r2
 8001446:	2210      	movs	r2, #16
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001452:	2201      	movs	r2, #1
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800145a:	230f      	movs	r3, #15
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001462:	e009      	b.n	8001478 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001468:	2210      	movs	r2, #16
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001470:	230f      	movs	r3, #15
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	781b      	ldrb	r3, [r3, #0]
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	fffffefd 	.word	0xfffffefd
 800148c:	fffe0219 	.word	0xfffe0219
 8001490:	833fffe7 	.word	0x833fffe7

08001494 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149e:	230f      	movs	r3, #15
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	055b      	lsls	r3, r3, #21
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d011      	beq.n	80014da <HAL_ADC_ConfigChannel+0x46>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d00d      	beq.n	80014da <HAL_ADC_ConfigChannel+0x46>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d009      	beq.n	80014da <HAL_ADC_ConfigChannel+0x46>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d005      	beq.n	80014da <HAL_ADC_ConfigChannel+0x46>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	d001      	beq.n	80014da <HAL_ADC_ConfigChannel+0x46>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2234      	movs	r2, #52	; 0x34
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x54>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e0bb      	b.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2234      	movs	r2, #52	; 0x34
 80014ec:	2101      	movs	r1, #1
 80014ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2204      	movs	r2, #4
 80014f8:	4013      	ands	r3, r2
 80014fa:	d000      	beq.n	80014fe <HAL_ADC_ConfigChannel+0x6a>
 80014fc:	e09f      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a59      	ldr	r2, [pc, #356]	; (8001668 <HAL_ADC_ConfigChannel+0x1d4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d100      	bne.n	800150a <HAL_ADC_ConfigChannel+0x76>
 8001508:	e077      	b.n	80015fa <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	409a      	lsls	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	055b      	lsls	r3, r3, #21
 8001528:	429a      	cmp	r2, r3
 800152a:	d037      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	2b01      	cmp	r3, #1
 8001532:	d033      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	2b02      	cmp	r3, #2
 800153a:	d02f      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	2b03      	cmp	r3, #3
 8001542:	d02b      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	2b04      	cmp	r3, #4
 800154a:	d027      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	2b05      	cmp	r3, #5
 8001552:	d023      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	2b06      	cmp	r3, #6
 800155a:	d01f      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	2b07      	cmp	r3, #7
 8001562:	d01b      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2107      	movs	r1, #7
 8001570:	400b      	ands	r3, r1
 8001572:	429a      	cmp	r2, r3
 8001574:	d012      	beq.n	800159c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2107      	movs	r1, #7
 8001582:	438a      	bics	r2, r1
 8001584:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6959      	ldr	r1, [r3, #20]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2207      	movs	r2, #7
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d003      	beq.n	80015ac <HAL_ADC_ConfigChannel+0x118>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d152      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_ADC_ConfigChannel+0x1d8>)
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	d102      	bne.n	80015be <HAL_ADC_ConfigChannel+0x12a>
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	e001      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x12e>
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	03db      	lsls	r3, r3, #15
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <HAL_ADC_ConfigChannel+0x1d8>)
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	d140      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_ADC_ConfigChannel+0x1dc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4927      	ldr	r1, [pc, #156]	; (8001674 <HAL_ADC_ConfigChannel+0x1e0>)
 80015d6:	0018      	movs	r0, r3
 80015d8:	f7fe fda0 	bl	800011c <__udivsi3>
 80015dc:	0003      	movs	r3, r0
 80015de:	001a      	movs	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	189b      	adds	r3, r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015ea:	e002      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f9      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x158>
 80015f8:	e02b      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	4099      	lsls	r1, r3
 8001608:	000b      	movs	r3, r1
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b10      	cmp	r3, #16
 800161a:	d003      	beq.n	8001624 <HAL_ADC_ConfigChannel+0x190>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b11      	cmp	r3, #17
 8001622:	d116      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_ADC_ConfigChannel+0x1d8>)
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d101      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1a0>
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_ADC_ConfigChannel+0x1e4>)
 8001632:	e000      	b.n	8001636 <HAL_ADC_ConfigChannel+0x1a2>
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_ADC_ConfigChannel+0x1e8>)
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_ADC_ConfigChannel+0x1d8>)
 8001638:	400a      	ands	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e009      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	2220      	movs	r2, #32
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800164a:	230f      	movs	r3, #15
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2234      	movs	r2, #52	; 0x34
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800165a:	230f      	movs	r3, #15
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	781b      	ldrb	r3, [r3, #0]
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b004      	add	sp, #16
 8001666:	bd80      	pop	{r7, pc}
 8001668:	00001001 	.word	0x00001001
 800166c:	40012708 	.word	0x40012708
 8001670:	20000000 	.word	0x20000000
 8001674:	000f4240 	.word	0x000f4240
 8001678:	ff7fffff 	.word	0xff7fffff
 800167c:	ffbfffff 	.word	0xffbfffff

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	0002      	movs	r2, r0
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800168c:	1dfb      	adds	r3, r7, #7
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b7f      	cmp	r3, #127	; 0x7f
 8001692:	d809      	bhi.n	80016a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	001a      	movs	r2, r3
 800169a:	231f      	movs	r3, #31
 800169c:	401a      	ands	r2, r3
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_EnableIRQ+0x30>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	4091      	lsls	r1, r2
 80016a4:	000a      	movs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
  }
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	0002      	movs	r2, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b7f      	cmp	r3, #127	; 0x7f
 80016c8:	d828      	bhi.n	800171c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ca:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <__NVIC_SetPriority+0xd4>)
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	33c0      	adds	r3, #192	; 0xc0
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	589b      	ldr	r3, [r3, r2]
 80016da:	1dfa      	adds	r2, r7, #7
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	0011      	movs	r1, r2
 80016e0:	2203      	movs	r2, #3
 80016e2:	400a      	ands	r2, r1
 80016e4:	00d2      	lsls	r2, r2, #3
 80016e6:	21ff      	movs	r1, #255	; 0xff
 80016e8:	4091      	lsls	r1, r2
 80016ea:	000a      	movs	r2, r1
 80016ec:	43d2      	mvns	r2, r2
 80016ee:	401a      	ands	r2, r3
 80016f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	019b      	lsls	r3, r3, #6
 80016f6:	22ff      	movs	r2, #255	; 0xff
 80016f8:	401a      	ands	r2, r3
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0018      	movs	r0, r3
 8001700:	2303      	movs	r3, #3
 8001702:	4003      	ands	r3, r0
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001708:	481f      	ldr	r0, [pc, #124]	; (8001788 <__NVIC_SetPriority+0xd4>)
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	430a      	orrs	r2, r1
 8001714:	33c0      	adds	r3, #192	; 0xc0
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800171a:	e031      	b.n	8001780 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <__NVIC_SetPriority+0xd8>)
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	0019      	movs	r1, r3
 8001724:	230f      	movs	r3, #15
 8001726:	400b      	ands	r3, r1
 8001728:	3b08      	subs	r3, #8
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3306      	adds	r3, #6
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	18d3      	adds	r3, r2, r3
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1dfa      	adds	r2, r7, #7
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	0011      	movs	r1, r2
 800173c:	2203      	movs	r2, #3
 800173e:	400a      	ands	r2, r1
 8001740:	00d2      	lsls	r2, r2, #3
 8001742:	21ff      	movs	r1, #255	; 0xff
 8001744:	4091      	lsls	r1, r2
 8001746:	000a      	movs	r2, r1
 8001748:	43d2      	mvns	r2, r2
 800174a:	401a      	ands	r2, r3
 800174c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	019b      	lsls	r3, r3, #6
 8001752:	22ff      	movs	r2, #255	; 0xff
 8001754:	401a      	ands	r2, r3
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	0018      	movs	r0, r3
 800175c:	2303      	movs	r3, #3
 800175e:	4003      	ands	r3, r0
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <__NVIC_SetPriority+0xd8>)
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	001c      	movs	r4, r3
 800176c:	230f      	movs	r3, #15
 800176e:	4023      	ands	r3, r4
 8001770:	3b08      	subs	r3, #8
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	430a      	orrs	r2, r1
 8001776:	3306      	adds	r3, #6
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	18c3      	adds	r3, r0, r3
 800177c:	3304      	adds	r3, #4
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b003      	add	sp, #12
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	045b      	lsls	r3, r3, #17
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d301      	bcc.n	80017a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a4:	2301      	movs	r3, #1
 80017a6:	e010      	b.n	80017ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <SysTick_Config+0x44>)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	3a01      	subs	r2, #1
 80017ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b0:	2301      	movs	r3, #1
 80017b2:	425b      	negs	r3, r3
 80017b4:	2103      	movs	r1, #3
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff ff7c 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x44>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x44>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	210f      	movs	r1, #15
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	1c02      	adds	r2, r0, #0
 80017e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	0011      	movs	r1, r2
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	0002      	movs	r2, r0
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff ff33 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff ffaf 	bl	8001790 <SysTick_Config>
 8001832:	0003      	movs	r3, r0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e14f      	b.n	8001aec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4091      	lsls	r1, r2
 8001856:	000a      	movs	r2, r1
 8001858:	4013      	ands	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d100      	bne.n	8001864 <HAL_GPIO_Init+0x28>
 8001862:	e140      	b.n	8001ae6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	4013      	ands	r3, r2
 800186c:	2b01      	cmp	r3, #1
 800186e:	d005      	beq.n	800187c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001878:	2b02      	cmp	r3, #2
 800187a:	d130      	bne.n	80018de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	409a      	lsls	r2, r3
 800188a:	0013      	movs	r3, r2
 800188c:	43da      	mvns	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b2:	2201      	movs	r2, #1
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	2201      	movs	r2, #1
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d017      	beq.n	800191a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	409a      	lsls	r2, r3
 80018f8:	0013      	movs	r3, r2
 80018fa:	43da      	mvns	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	409a      	lsls	r2, r3
 800190c:	0013      	movs	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2203      	movs	r2, #3
 8001920:	4013      	ands	r3, r2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d123      	bne.n	800196e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	58d3      	ldr	r3, [r2, r3]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2207      	movs	r2, #7
 8001938:	4013      	ands	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2107      	movs	r1, #7
 8001952:	400b      	ands	r3, r1
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	6939      	ldr	r1, [r7, #16]
 800196c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	43da      	mvns	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	401a      	ands	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	409a      	lsls	r2, r3
 8001994:	0013      	movs	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	23c0      	movs	r3, #192	; 0xc0
 80019a8:	029b      	lsls	r3, r3, #10
 80019aa:	4013      	ands	r3, r2
 80019ac:	d100      	bne.n	80019b0 <HAL_GPIO_Init+0x174>
 80019ae:	e09a      	b.n	8001ae6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b0:	4b54      	ldr	r3, [pc, #336]	; (8001b04 <HAL_GPIO_Init+0x2c8>)
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_GPIO_Init+0x2c8>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	430a      	orrs	r2, r1
 80019ba:	619a      	str	r2, [r3, #24]
 80019bc:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <HAL_GPIO_Init+0x2c8>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c8:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	589b      	ldr	r3, [r3, r2]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2203      	movs	r2, #3
 80019da:	4013      	ands	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	409a      	lsls	r2, r3
 80019e2:	0013      	movs	r3, r2
 80019e4:	43da      	mvns	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	2390      	movs	r3, #144	; 0x90
 80019f0:	05db      	lsls	r3, r3, #23
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x1e2>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a44      	ldr	r2, [pc, #272]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x1de>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a43      	ldr	r2, [pc, #268]	; (8001b10 <HAL_GPIO_Init+0x2d4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x1da>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a42      	ldr	r2, [pc, #264]	; (8001b14 <HAL_GPIO_Init+0x2d8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x1d6>
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e004      	b.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x1e4>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	2103      	movs	r1, #3
 8001a24:	400a      	ands	r2, r1
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a30:	4935      	ldr	r1, [pc, #212]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43da      	mvns	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	025b      	lsls	r3, r3, #9
 8001a56:	4013      	ands	r3, r2
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43da      	mvns	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	4013      	ands	r3, r2
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	035b      	lsls	r3, r3, #13
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	039b      	lsls	r3, r3, #14
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	40da      	lsrs	r2, r3
 8001af4:	1e13      	subs	r3, r2, #0
 8001af6:	d000      	beq.n	8001afa <HAL_GPIO_Init+0x2be>
 8001af8:	e6a8      	b.n	800184c <HAL_GPIO_Init+0x10>
  } 
}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b006      	add	sp, #24
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	48000400 	.word	0x48000400
 8001b10:	48000800 	.word	0x48000800
 8001b14:	48000c00 	.word	0x48000c00
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	000a      	movs	r2, r1
 8001b26:	1cbb      	adds	r3, r7, #2
 8001b28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	1cba      	adds	r2, r7, #2
 8001b30:	8812      	ldrh	r2, [r2, #0]
 8001b32:	4013      	ands	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b36:	230f      	movs	r3, #15
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
  }
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	0008      	movs	r0, r1
 8001b60:	0011      	movs	r1, r2
 8001b62:	1cbb      	adds	r3, r7, #2
 8001b64:	1c02      	adds	r2, r0, #0
 8001b66:	801a      	strh	r2, [r3, #0]
 8001b68:	1c7b      	adds	r3, r7, #1
 8001b6a:	1c0a      	adds	r2, r1, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b6e:	1c7b      	adds	r3, r7, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b76:	1cbb      	adds	r3, r7, #2
 8001b78:	881a      	ldrh	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b80:	1cbb      	adds	r3, r7, #2
 8001b82:	881a      	ldrh	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	000a      	movs	r2, r1
 8001b9a:	1cbb      	adds	r3, r7, #2
 8001b9c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba4:	1cbb      	adds	r3, r7, #2
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4013      	ands	r3, r2
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	1cb9      	adds	r1, r7, #2
 8001bb4:	8809      	ldrh	r1, [r1, #0]
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b004      	add	sp, #16
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e301      	b.n	80021de <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x1e>
 8001be4:	e08d      	b.n	8001d02 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001be6:	4bc3      	ldr	r3, [pc, #780]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	220c      	movs	r2, #12
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d00e      	beq.n	8001c10 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf2:	4bc0      	ldr	r3, [pc, #768]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x64>
 8001bfe:	4bbd      	ldr	r3, [pc, #756]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	401a      	ands	r2, r3
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10d      	bne.n	8001c2c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4bb8      	ldr	r3, [pc, #736]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x56>
 8001c1c:	e070      	b.n	8001d00 <HAL_RCC_OscConfig+0x138>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d000      	beq.n	8001c28 <HAL_RCC_OscConfig+0x60>
 8001c26:	e06b      	b.n	8001d00 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e2d8      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x7c>
 8001c34:	4baf      	ldr	r3, [pc, #700]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4bae      	ldr	r3, [pc, #696]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0249      	lsls	r1, r1, #9
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e02f      	b.n	8001ca4 <HAL_RCC_OscConfig+0xdc>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10c      	bne.n	8001c66 <HAL_RCC_OscConfig+0x9e>
 8001c4c:	4ba9      	ldr	r3, [pc, #676]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4ba8      	ldr	r3, [pc, #672]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	49a9      	ldr	r1, [pc, #676]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4ba6      	ldr	r3, [pc, #664]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4ba5      	ldr	r3, [pc, #660]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	49a7      	ldr	r1, [pc, #668]	; (8001efc <HAL_RCC_OscConfig+0x334>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e01e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xdc>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d10e      	bne.n	8001c8c <HAL_RCC_OscConfig+0xc4>
 8001c6e:	4ba1      	ldr	r3, [pc, #644]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	02c9      	lsls	r1, r1, #11
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	4b9d      	ldr	r3, [pc, #628]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b9c      	ldr	r3, [pc, #624]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0249      	lsls	r1, r1, #9
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xdc>
 8001c8c:	4b99      	ldr	r3, [pc, #612]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b98      	ldr	r3, [pc, #608]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c92:	4999      	ldr	r1, [pc, #612]	; (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4b96      	ldr	r3, [pc, #600]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b95      	ldr	r3, [pc, #596]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c9e:	4997      	ldr	r1, [pc, #604]	; (8001efc <HAL_RCC_OscConfig+0x334>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d014      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fa84 	bl	80011b8 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fa7f 	bl	80011b8 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e28a      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	4b8a      	ldr	r3, [pc, #552]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0xee>
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fa6f 	bl	80011b8 <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fa6a 	bl	80011b8 <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e275      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x118>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x146>
 8001d0c:	e069      	b.n	8001de2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d0e:	4b79      	ldr	r3, [pc, #484]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	220c      	movs	r2, #12
 8001d14:	4013      	ands	r3, r2
 8001d16:	d00b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d18:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d11c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x196>
 8001d24:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d116      	bne.n	8001d5e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d30:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x17e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e24b      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	22f8      	movs	r2, #248	; 0xf8
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	00da      	lsls	r2, r3, #3
 8001d56:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5c:	e041      	b.n	8001de2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d024      	beq.n	8001db0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff fa21 	bl	80011b8 <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fa1c 	bl	80011b8 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e227      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0f1      	beq.n	8001d7c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	22f8      	movs	r2, #248	; 0xf8
 8001d9e:	4393      	bics	r3, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00da      	lsls	r2, r3, #3
 8001da8:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e018      	b.n	8001de2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	2101      	movs	r1, #1
 8001db8:	438a      	bics	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f9fc 	bl	80011b8 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff f9f7 	bl	80011b8 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e202      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d1f1      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2208      	movs	r2, #8
 8001de8:	4013      	ands	r3, r2
 8001dea:	d036      	beq.n	8001e5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d019      	beq.n	8001e28 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df8:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff f9da 	bl	80011b8 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7ff f9d5 	bl	80011b8 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1e0      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d0f1      	beq.n	8001e0a <HAL_RCC_OscConfig+0x242>
 8001e26:	e018      	b.n	8001e5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	438a      	bics	r2, r1
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff f9c0 	bl	80011b8 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff f9bb 	bl	80011b8 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1c6      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f1      	bne.n	8001e3e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4013      	ands	r3, r2
 8001e62:	d100      	bne.n	8001e66 <HAL_RCC_OscConfig+0x29e>
 8001e64:	e0b4      	b.n	8001fd0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	201f      	movs	r0, #31
 8001e68:	183b      	adds	r3, r7, r0
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	055b      	lsls	r3, r3, #21
 8001e76:	4013      	ands	r3, r2
 8001e78:	d110      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0549      	lsls	r1, r1, #21
 8001e84:	430a      	orrs	r2, r1
 8001e86:	61da      	str	r2, [r3, #28]
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e96:	183b      	adds	r3, r7, r0
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d11a      	bne.n	8001ede <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	0049      	lsls	r1, r1, #1
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff f97f 	bl	80011b8 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7ff f97a 	bl	80011b8 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e185      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10e      	bne.n	8001f04 <HAL_RCC_OscConfig+0x33c>
 8001ee6:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001ee8:	6a1a      	ldr	r2, [r3, #32]
 8001eea:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	e035      	b.n	8001f60 <HAL_RCC_OscConfig+0x398>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	fffeffff 	.word	0xfffeffff
 8001efc:	fffbffff 	.word	0xfffbffff
 8001f00:	40007000 	.word	0x40007000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x35e>
 8001f0c:	4bb6      	ldr	r3, [pc, #728]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	4bb5      	ldr	r3, [pc, #724]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	621a      	str	r2, [r3, #32]
 8001f18:	4bb3      	ldr	r3, [pc, #716]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	4bb2      	ldr	r3, [pc, #712]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f1e:	2104      	movs	r1, #4
 8001f20:	438a      	bics	r2, r1
 8001f22:	621a      	str	r2, [r3, #32]
 8001f24:	e01c      	b.n	8001f60 <HAL_RCC_OscConfig+0x398>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x380>
 8001f2e:	4bae      	ldr	r3, [pc, #696]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f30:	6a1a      	ldr	r2, [r3, #32]
 8001f32:	4bad      	ldr	r3, [pc, #692]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f34:	2104      	movs	r1, #4
 8001f36:	430a      	orrs	r2, r1
 8001f38:	621a      	str	r2, [r3, #32]
 8001f3a:	4bab      	ldr	r3, [pc, #684]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f3c:	6a1a      	ldr	r2, [r3, #32]
 8001f3e:	4baa      	ldr	r3, [pc, #680]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	621a      	str	r2, [r3, #32]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0x398>
 8001f48:	4ba7      	ldr	r3, [pc, #668]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	4ba6      	ldr	r3, [pc, #664]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	438a      	bics	r2, r1
 8001f52:	621a      	str	r2, [r3, #32]
 8001f54:	4ba4      	ldr	r3, [pc, #656]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	4ba3      	ldr	r3, [pc, #652]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d014      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff f926 	bl	80011b8 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	e009      	b.n	8001f86 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7ff f921 	bl	80011b8 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a9b      	ldr	r2, [pc, #620]	; (80021ec <HAL_RCC_OscConfig+0x624>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e12b      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	4b98      	ldr	r3, [pc, #608]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3aa>
 8001f90:	e013      	b.n	8001fba <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff f911 	bl	80011b8 <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	e009      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f90c 	bl	80011b8 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	4a91      	ldr	r2, [pc, #580]	; (80021ec <HAL_RCC_OscConfig+0x624>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e116      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	4b8d      	ldr	r3, [pc, #564]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fba:	231f      	movs	r3, #31
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	4b87      	ldr	r3, [pc, #540]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fca:	4989      	ldr	r1, [pc, #548]	; (80021f0 <HAL_RCC_OscConfig+0x628>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d063      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d12a      	bne.n	8002038 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fe2:	4b81      	ldr	r3, [pc, #516]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe6:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fe8:	2104      	movs	r1, #4
 8001fea:	430a      	orrs	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001fee:	4b7e      	ldr	r3, [pc, #504]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f8dd 	bl	80011b8 <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002004:	f7ff f8d8 	bl	80011b8 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0e3      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002016:	4b74      	ldr	r3, [pc, #464]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d0f1      	beq.n	8002004 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002020:	4b71      	ldr	r3, [pc, #452]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	22f8      	movs	r2, #248	; 0xf8
 8002026:	4393      	bics	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	00da      	lsls	r2, r3, #3
 8002030:	4b6d      	ldr	r3, [pc, #436]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002032:	430a      	orrs	r2, r1
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
 8002036:	e034      	b.n	80020a2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	3305      	adds	r3, #5
 800203e:	d111      	bne.n	8002064 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002040:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002046:	2104      	movs	r1, #4
 8002048:	438a      	bics	r2, r1
 800204a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800204c:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 800204e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002050:	22f8      	movs	r2, #248	; 0xf8
 8002052:	4393      	bics	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	00da      	lsls	r2, r3, #3
 800205c:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 800205e:	430a      	orrs	r2, r1
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
 8002062:	e01e      	b.n	80020a2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002064:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002068:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 800206a:	2104      	movs	r1, #4
 800206c:	430a      	orrs	r2, r1
 800206e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002070:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002074:	4b5c      	ldr	r3, [pc, #368]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002076:	2101      	movs	r1, #1
 8002078:	438a      	bics	r2, r1
 800207a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7ff f89c 	bl	80011b8 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002086:	f7ff f897 	bl	80011b8 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0a2      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d1f1      	bne.n	8002086 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d100      	bne.n	80020ac <HAL_RCC_OscConfig+0x4e4>
 80020aa:	e097      	b.n	80021dc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	220c      	movs	r2, #12
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d100      	bne.n	80020ba <HAL_RCC_OscConfig+0x4f2>
 80020b8:	e06b      	b.n	8002192 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d14c      	bne.n	800215c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020c8:	494a      	ldr	r1, [pc, #296]	; (80021f4 <HAL_RCC_OscConfig+0x62c>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff f873 	bl	80011b8 <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f86e 	bl	80011b8 <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e079      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	049b      	lsls	r3, r3, #18
 80020f2:	4013      	ands	r3, r2
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f6:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	220f      	movs	r2, #15
 80020fc:	4393      	bics	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002104:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002106:	430a      	orrs	r2, r1
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a3a      	ldr	r2, [pc, #232]	; (80021f8 <HAL_RCC_OscConfig+0x630>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	431a      	orrs	r2, r3
 800211e:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	0449      	lsls	r1, r1, #17
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff f841 	bl	80011b8 <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff f83c 	bl	80011b8 <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e047      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	049b      	lsls	r3, r3, #18
 8002156:	4013      	ands	r3, r2
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x574>
 800215a:	e03f      	b.n	80021dc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002162:	4924      	ldr	r1, [pc, #144]	; (80021f4 <HAL_RCC_OscConfig+0x62c>)
 8002164:	400a      	ands	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff f826 	bl	80011b8 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002172:	f7ff f821 	bl	80011b8 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e02c      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	049b      	lsls	r3, r3, #18
 800218c:	4013      	ands	r3, r2
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x5aa>
 8002190:	e024      	b.n	80021dc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e01f      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_RCC_OscConfig+0x620>)
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d10e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	220f      	movs	r2, #15
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	23f0      	movs	r3, #240	; 0xf0
 80021cc:	039b      	lsls	r3, r3, #14
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b008      	add	sp, #32
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	40021000 	.word	0x40021000
 80021ec:	00001388 	.word	0x00001388
 80021f0:	efffffff 	.word	0xefffffff
 80021f4:	feffffff 	.word	0xfeffffff
 80021f8:	ffc2ffff 	.word	0xffc2ffff

080021fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b3      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002210:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d911      	bls.n	8002242 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b58      	ldr	r3, [pc, #352]	; (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2201      	movs	r2, #1
 8002224:	4393      	bics	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	4b55      	ldr	r3, [pc, #340]	; (8002380 <HAL_RCC_ClockConfig+0x184>)
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e09a      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2202      	movs	r2, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d015      	beq.n	8002278 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2204      	movs	r2, #4
 8002252:	4013      	ands	r3, r2
 8002254:	d006      	beq.n	8002264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002256:	4b4b      	ldr	r3, [pc, #300]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 800225c:	21e0      	movs	r1, #224	; 0xe0
 800225e:	00c9      	lsls	r1, r1, #3
 8002260:	430a      	orrs	r2, r1
 8002262:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	22f0      	movs	r2, #240	; 0xf0
 800226a:	4393      	bics	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	4b44      	ldr	r3, [pc, #272]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2201      	movs	r2, #1
 800227e:	4013      	ands	r3, r2
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	029b      	lsls	r3, r3, #10
 8002292:	4013      	ands	r3, r2
 8002294:	d114      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06e      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	4013      	ands	r3, r2
 80022ac:	d108      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e062      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b34      	ldr	r3, [pc, #208]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e05b      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c0:	4b30      	ldr	r3, [pc, #192]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	4393      	bics	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe ff70 	bl	80011b8 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7fe ff6b 	bl	80011b8 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <HAL_RCC_ClockConfig+0x18c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e042      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	220c      	movs	r2, #12
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1ec      	bne.n	80022de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	4013      	ands	r3, r2
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d211      	bcs.n	8002336 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	4393      	bics	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCC_ClockConfig+0x184>)
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	4013      	ands	r3, r2
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e020      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2204      	movs	r2, #4
 800233c:	4013      	ands	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_RCC_ClockConfig+0x190>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002354:	f000 f820 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002358:	0001      	movs	r1, r0
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_RCC_ClockConfig+0x188>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	220f      	movs	r2, #15
 8002362:	4013      	ands	r3, r2
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x194>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	000a      	movs	r2, r1
 800236a:	40da      	lsrs	r2, r3
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x198>)
 800236e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fedb 	bl	800112c <HAL_InitTick>
  
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	00001388 	.word	0x00001388
 800238c:	fffff8ff 	.word	0xfffff8ff
 8002390:	080054ac 	.word	0x080054ac
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b08f      	sub	sp, #60	; 0x3c
 800239c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800239e:	2314      	movs	r3, #20
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	4a2b      	ldr	r2, [pc, #172]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023a6:	c313      	stmia	r3!, {r0, r1, r4}
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4a29      	ldr	r2, [pc, #164]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023b2:	c313      	stmia	r3!, {r0, r1, r4}
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023bc:	2300      	movs	r3, #0
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	220c      	movs	r2, #12
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d002      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0x4a>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d003      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x50>
 80023e0:	e02d      	b.n	800243e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_RCC_GetSysClockFreq+0xc4>)
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023e6:	e02d      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	220f      	movs	r2, #15
 80023ee:	4013      	ands	r3, r2
 80023f0:	2214      	movs	r2, #20
 80023f2:	18ba      	adds	r2, r7, r2
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	220f      	movs	r2, #15
 80023fe:	4013      	ands	r3, r2
 8002400:	1d3a      	adds	r2, r7, #4
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	025b      	lsls	r3, r3, #9
 800240c:	4013      	ands	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002412:	4812      	ldr	r0, [pc, #72]	; (800245c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002414:	f7fd fe82 	bl	800011c <__udivsi3>
 8002418:	0003      	movs	r3, r0
 800241a:	001a      	movs	r2, r3
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	4353      	muls	r3, r2
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
 8002422:	e009      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002426:	000a      	movs	r2, r1
 8002428:	0152      	lsls	r2, r2, #5
 800242a:	1a52      	subs	r2, r2, r1
 800242c:	0193      	lsls	r3, r2, #6
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	185b      	adds	r3, r3, r1
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800243c:	e002      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002442:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b00f      	add	sp, #60	; 0x3c
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	08005454 	.word	0x08005454
 8002454:	08005464 	.word	0x08005464
 8002458:	40021000 	.word	0x40021000
 800245c:	007a1200 	.word	0x007a1200

08002460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <HAL_RCC_GetHCLKFreq+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002478:	f7ff fff2 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 800247c:	0001      	movs	r1, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	2207      	movs	r2, #7
 8002486:	4013      	ands	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_RCC_GetPCLK1Freq+0x28>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	40d9      	lsrs	r1, r3
 800248e:	000b      	movs	r3, r1
}    
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	40021000 	.word	0x40021000
 800249c:	080054bc 	.word	0x080054bc

080024a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e042      	b.n	8002538 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	223d      	movs	r2, #61	; 0x3d
 80024b6:	5c9b      	ldrb	r3, [r3, r2]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	223c      	movs	r2, #60	; 0x3c
 80024c2:	2100      	movs	r1, #0
 80024c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe fc0b 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	223d      	movs	r2, #61	; 0x3d
 80024d2:	2102      	movs	r1, #2
 80024d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	0019      	movs	r1, r3
 80024e0:	0010      	movs	r0, r2
 80024e2:	f000 fe21 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2246      	movs	r2, #70	; 0x46
 80024ea:	2101      	movs	r1, #1
 80024ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	223e      	movs	r2, #62	; 0x3e
 80024f2:	2101      	movs	r1, #1
 80024f4:	5499      	strb	r1, [r3, r2]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	223f      	movs	r2, #63	; 0x3f
 80024fa:	2101      	movs	r1, #1
 80024fc:	5499      	strb	r1, [r3, r2]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2241      	movs	r2, #65	; 0x41
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2242      	movs	r2, #66	; 0x42
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2243      	movs	r2, #67	; 0x43
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2244      	movs	r2, #68	; 0x44
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2245      	movs	r2, #69	; 0x45
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223d      	movs	r2, #61	; 0x3d
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	223d      	movs	r2, #61	; 0x3d
 800254c:	5c9b      	ldrb	r3, [r3, r2]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d001      	beq.n	8002558 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e02d      	b.n	80025b4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	223d      	movs	r2, #61	; 0x3d
 800255c:	2102      	movs	r1, #2
 800255e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a15      	ldr	r2, [pc, #84]	; (80025bc <HAL_TIM_Base_Start+0x7c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_TIM_Base_Start+0x3e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <HAL_TIM_Base_Start+0x80>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <HAL_TIM_Base_Start+0x3e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_TIM_Base_Start+0x84>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d111      	bne.n	80025a2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2207      	movs	r2, #7
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d010      	beq.n	80025b2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2101      	movs	r1, #1
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a0:	e007      	b.n	80025b2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b004      	add	sp, #16
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40014000 	.word	0x40014000

080025c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	223d      	movs	r2, #61	; 0x3d
 80025d4:	5c9b      	ldrb	r3, [r3, r2]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e035      	b.n	800264c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	223d      	movs	r2, #61	; 0x3d
 80025e4:	2102      	movs	r1, #2
 80025e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2101      	movs	r1, #1
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <HAL_TIM_Base_Start_IT+0x8c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x4e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a14      	ldr	r2, [pc, #80]	; (8002658 <HAL_TIM_Base_Start_IT+0x90>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x4e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a12      	ldr	r2, [pc, #72]	; (800265c <HAL_TIM_Base_Start_IT+0x94>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d111      	bne.n	800263a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2207      	movs	r2, #7
 800261e:	4013      	ands	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d010      	beq.n	800264a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002638:	e007      	b.n	800264a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40000400 	.word	0x40000400
 800265c:	40014000 	.word	0x40014000

08002660 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e042      	b.n	80026f8 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	223d      	movs	r2, #61	; 0x3d
 8002676:	5c9b      	ldrb	r3, [r3, r2]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d107      	bne.n	800268e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	223c      	movs	r2, #60	; 0x3c
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f839 	bl	8002700 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	223d      	movs	r2, #61	; 0x3d
 8002692:	2102      	movs	r1, #2
 8002694:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	0019      	movs	r1, r3
 80026a0:	0010      	movs	r0, r2
 80026a2:	f000 fd41 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2246      	movs	r2, #70	; 0x46
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223e      	movs	r2, #62	; 0x3e
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	223f      	movs	r2, #63	; 0x3f
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2241      	movs	r2, #65	; 0x41
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2242      	movs	r2, #66	; 0x42
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2243      	movs	r2, #67	; 0x43
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2244      	movs	r2, #68	; 0x44
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2245      	movs	r2, #69	; 0x45
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	223d      	movs	r2, #61	; 0x3d
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e042      	b.n	80027a8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	223d      	movs	r2, #61	; 0x3d
 8002726:	5c9b      	ldrb	r3, [r3, r2]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	223c      	movs	r2, #60	; 0x3c
 8002732:	2100      	movs	r1, #0
 8002734:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	0018      	movs	r0, r3
 800273a:	f000 f839 	bl	80027b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	223d      	movs	r2, #61	; 0x3d
 8002742:	2102      	movs	r1, #2
 8002744:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	0019      	movs	r1, r3
 8002750:	0010      	movs	r0, r2
 8002752:	f000 fce9 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2246      	movs	r2, #70	; 0x46
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223e      	movs	r2, #62	; 0x3e
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	223f      	movs	r2, #63	; 0x3f
 800276a:	2101      	movs	r1, #1
 800276c:	5499      	strb	r1, [r3, r2]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	2101      	movs	r1, #1
 8002774:	5499      	strb	r1, [r3, r2]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2241      	movs	r2, #65	; 0x41
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2242      	movs	r2, #66	; 0x42
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2243      	movs	r2, #67	; 0x43
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2244      	movs	r2, #68	; 0x44
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2245      	movs	r2, #69	; 0x45
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	223d      	movs	r2, #61	; 0x3d
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <HAL_TIM_PWM_Start+0x22>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223e      	movs	r2, #62	; 0x3e
 80027d4:	5c9b      	ldrb	r3, [r3, r2]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	1e5a      	subs	r2, r3, #1
 80027dc:	4193      	sbcs	r3, r2
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	e01f      	b.n	8002822 <HAL_TIM_PWM_Start+0x62>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d108      	bne.n	80027fa <HAL_TIM_PWM_Start+0x3a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	223f      	movs	r2, #63	; 0x3f
 80027ec:	5c9b      	ldrb	r3, [r3, r2]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	1e5a      	subs	r2, r3, #1
 80027f4:	4193      	sbcs	r3, r2
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	e013      	b.n	8002822 <HAL_TIM_PWM_Start+0x62>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d108      	bne.n	8002812 <HAL_TIM_PWM_Start+0x52>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2240      	movs	r2, #64	; 0x40
 8002804:	5c9b      	ldrb	r3, [r3, r2]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	4193      	sbcs	r3, r2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e007      	b.n	8002822 <HAL_TIM_PWM_Start+0x62>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2241      	movs	r2, #65	; 0x41
 8002816:	5c9b      	ldrb	r3, [r3, r2]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	1e5a      	subs	r2, r3, #1
 800281e:	4193      	sbcs	r3, r2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06e      	b.n	8002908 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Start+0x7a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	223e      	movs	r2, #62	; 0x3e
 8002834:	2102      	movs	r1, #2
 8002836:	5499      	strb	r1, [r3, r2]
 8002838:	e013      	b.n	8002862 <HAL_TIM_PWM_Start+0xa2>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d104      	bne.n	800284a <HAL_TIM_PWM_Start+0x8a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	223f      	movs	r2, #63	; 0x3f
 8002844:	2102      	movs	r1, #2
 8002846:	5499      	strb	r1, [r3, r2]
 8002848:	e00b      	b.n	8002862 <HAL_TIM_PWM_Start+0xa2>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d104      	bne.n	800285a <HAL_TIM_PWM_Start+0x9a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	2102      	movs	r1, #2
 8002856:	5499      	strb	r1, [r3, r2]
 8002858:	e003      	b.n	8002862 <HAL_TIM_PWM_Start+0xa2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2241      	movs	r2, #65	; 0x41
 800285e:	2102      	movs	r1, #2
 8002860:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	0018      	movs	r0, r3
 800286c:	f000 ff68 	bl	8003740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a26      	ldr	r2, [pc, #152]	; (8002910 <HAL_TIM_PWM_Start+0x150>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00e      	beq.n	8002898 <HAL_TIM_PWM_Start+0xd8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a25      	ldr	r2, [pc, #148]	; (8002914 <HAL_TIM_PWM_Start+0x154>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_TIM_PWM_Start+0xd8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a23      	ldr	r2, [pc, #140]	; (8002918 <HAL_TIM_PWM_Start+0x158>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_TIM_PWM_Start+0xd8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_TIM_PWM_Start+0x15c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_TIM_PWM_Start+0xdc>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_TIM_PWM_Start+0xde>
 800289c:	2300      	movs	r3, #0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	0209      	lsls	r1, r1, #8
 80028b0:	430a      	orrs	r2, r1
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a15      	ldr	r2, [pc, #84]	; (8002910 <HAL_TIM_PWM_Start+0x150>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_TIM_PWM_Start+0x112>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a17      	ldr	r2, [pc, #92]	; (8002920 <HAL_TIM_PWM_Start+0x160>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_TIM_PWM_Start+0x112>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <HAL_TIM_PWM_Start+0x154>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d111      	bne.n	80028f6 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2207      	movs	r2, #7
 80028da:	4013      	ands	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b06      	cmp	r3, #6
 80028e2:	d010      	beq.n	8002906 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2101      	movs	r1, #1
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f4:	e007      	b.n	8002906 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b004      	add	sp, #16
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40014000 	.word	0x40014000
 8002918:	40014400 	.word	0x40014400
 800291c:	40014800 	.word	0x40014800
 8002920:	40000400 	.word	0x40000400

08002924 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	230f      	movs	r3, #15
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d108      	bne.n	800294e <HAL_TIM_PWM_Start_IT+0x2a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	223e      	movs	r2, #62	; 0x3e
 8002940:	5c9b      	ldrb	r3, [r3, r2]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	1e5a      	subs	r2, r3, #1
 8002948:	4193      	sbcs	r3, r2
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e01f      	b.n	800298e <HAL_TIM_PWM_Start_IT+0x6a>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d108      	bne.n	8002966 <HAL_TIM_PWM_Start_IT+0x42>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	223f      	movs	r2, #63	; 0x3f
 8002958:	5c9b      	ldrb	r3, [r3, r2]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	1e5a      	subs	r2, r3, #1
 8002960:	4193      	sbcs	r3, r2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	e013      	b.n	800298e <HAL_TIM_PWM_Start_IT+0x6a>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d108      	bne.n	800297e <HAL_TIM_PWM_Start_IT+0x5a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	5c9b      	ldrb	r3, [r3, r2]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	4193      	sbcs	r3, r2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	e007      	b.n	800298e <HAL_TIM_PWM_Start_IT+0x6a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2241      	movs	r2, #65	; 0x41
 8002982:	5c9b      	ldrb	r3, [r3, r2]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	4193      	sbcs	r3, r2
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0b1      	b.n	8002afa <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start_IT+0x82>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	223e      	movs	r2, #62	; 0x3e
 80029a0:	2102      	movs	r1, #2
 80029a2:	5499      	strb	r1, [r3, r2]
 80029a4:	e013      	b.n	80029ce <HAL_TIM_PWM_Start_IT+0xaa>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PWM_Start_IT+0x92>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	223f      	movs	r2, #63	; 0x3f
 80029b0:	2102      	movs	r1, #2
 80029b2:	5499      	strb	r1, [r3, r2]
 80029b4:	e00b      	b.n	80029ce <HAL_TIM_PWM_Start_IT+0xaa>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d104      	bne.n	80029c6 <HAL_TIM_PWM_Start_IT+0xa2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	2102      	movs	r1, #2
 80029c2:	5499      	strb	r1, [r3, r2]
 80029c4:	e003      	b.n	80029ce <HAL_TIM_PWM_Start_IT+0xaa>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2241      	movs	r2, #65	; 0x41
 80029ca:	2102      	movs	r1, #2
 80029cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d02a      	beq.n	8002a2a <HAL_TIM_PWM_Start_IT+0x106>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d830      	bhi.n	8002a3c <HAL_TIM_PWM_Start_IT+0x118>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d01b      	beq.n	8002a18 <HAL_TIM_PWM_Start_IT+0xf4>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d82a      	bhi.n	8002a3c <HAL_TIM_PWM_Start_IT+0x118>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_TIM_PWM_Start_IT+0xd0>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d009      	beq.n	8002a06 <HAL_TIM_PWM_Start_IT+0xe2>
 80029f2:	e023      	b.n	8002a3c <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2102      	movs	r1, #2
 8002a00:	430a      	orrs	r2, r1
 8002a02:	60da      	str	r2, [r3, #12]
      break;
 8002a04:	e01f      	b.n	8002a46 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2104      	movs	r1, #4
 8002a12:	430a      	orrs	r2, r1
 8002a14:	60da      	str	r2, [r3, #12]
      break;
 8002a16:	e016      	b.n	8002a46 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2108      	movs	r1, #8
 8002a24:	430a      	orrs	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]
      break;
 8002a28:	e00d      	b.n	8002a46 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2110      	movs	r1, #16
 8002a36:	430a      	orrs	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]
      break;
 8002a3a:	e004      	b.n	8002a46 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
      break;
 8002a44:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002a46:	230f      	movs	r3, #15
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d151      	bne.n	8002af4 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 fe71 	bl	8003740 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_TIM_PWM_Start_IT+0x162>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_TIM_PWM_Start_IT+0x162>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_TIM_PWM_Start_IT+0x162>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_PWM_Start_IT+0x166>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_TIM_PWM_Start_IT+0x168>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	0209      	lsls	r1, r1, #8
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d009      	beq.n	8002ac0 <HAL_TIM_PWM_Start_IT+0x19c>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_TIM_PWM_Start_IT+0x19c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d010      	beq.n	8002af4 <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae2:	e007      	b.n	8002af4 <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2101      	movs	r1, #1
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002af4:	230f      	movs	r3, #15
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	781b      	ldrb	r3, [r3, #0]
}
 8002afa:	0018      	movs	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b004      	add	sp, #16
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40014800 	.word	0x40014800
 8002b14:	40000400 	.word	0x40000400

08002b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2202      	movs	r2, #2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d124      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d11d      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2203      	movs	r2, #3
 8002b42:	4252      	negs	r2, r2
 8002b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2203      	movs	r2, #3
 8002b54:	4013      	ands	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7fd fb92 	bl	8000284 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e007      	b.n	8002b72 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7fd fb81 	bl	800026c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7fd fb95 	bl	800029c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d125      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d11e      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2205      	movs	r2, #5
 8002b9a:	4252      	negs	r2, r2
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	23c0      	movs	r3, #192	; 0xc0
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd fb65 	bl	8000284 <HAL_TIM_IC_CaptureCallback>
 8002bba:	e007      	b.n	8002bcc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7fd fb54 	bl	800026c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7fd fb68 	bl	800029c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d124      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2208      	movs	r2, #8
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d11d      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2209      	movs	r2, #9
 8002bf4:	4252      	negs	r2, r2
 8002bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2203      	movs	r2, #3
 8002c06:	4013      	ands	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7fd fb39 	bl	8000284 <HAL_TIM_IC_CaptureCallback>
 8002c12:	e007      	b.n	8002c24 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7fd fb28 	bl	800026c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7fd fb3c 	bl	800029c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2210      	movs	r2, #16
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d125      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2210      	movs	r2, #16
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d11e      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2211      	movs	r2, #17
 8002c4c:	4252      	negs	r2, r2
 8002c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2208      	movs	r2, #8
 8002c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	23c0      	movs	r3, #192	; 0xc0
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7fd fb0c 	bl	8000284 <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e007      	b.n	8002c7e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7fd fafb 	bl	800026c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fd fb0f 	bl	800029c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d10f      	bne.n	8002cb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d108      	bne.n	8002cb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	4252      	negs	r2, r2
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fd fad1 	bl	8000254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b80      	cmp	r3, #128	; 0x80
 8002ccc:	d108      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2281      	movs	r2, #129	; 0x81
 8002cd4:	4252      	negs	r2, r2
 8002cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fe12 	bl	8003904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d10f      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2240      	movs	r2, #64	; 0x40
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d108      	bne.n	8002d0e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2241      	movs	r2, #65	; 0x41
 8002d02:	4252      	negs	r2, r2
 8002d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fd fad3 	bl	80002b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2220      	movs	r2, #32
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d10f      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d108      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2221      	movs	r2, #33	; 0x21
 8002d30:	4252      	negs	r2, r2
 8002d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 fddc 	bl	80038f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	2317      	movs	r3, #23
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	223c      	movs	r2, #60	; 0x3c
 8002d5c:	5c9b      	ldrb	r3, [r3, r2]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_TIM_OC_ConfigChannel+0x22>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e042      	b.n	8002dec <HAL_TIM_OC_ConfigChannel+0xa8>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	223c      	movs	r2, #60	; 0x3c
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d027      	beq.n	8002dc4 <HAL_TIM_OC_ConfigChannel+0x80>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d82c      	bhi.n	8002dd4 <HAL_TIM_OC_ConfigChannel+0x90>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d019      	beq.n	8002db4 <HAL_TIM_OC_ConfigChannel+0x70>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d826      	bhi.n	8002dd4 <HAL_TIM_OC_ConfigChannel+0x90>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_TIM_OC_ConfigChannel+0x50>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d008      	beq.n	8002da4 <HAL_TIM_OC_ConfigChannel+0x60>
 8002d92:	e01f      	b.n	8002dd4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 fa39 	bl	8003214 <TIM_OC1_SetConfig>
      break;
 8002da2:	e01c      	b.n	8002dde <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	0011      	movs	r1, r2
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 fab9 	bl	8003324 <TIM_OC2_SetConfig>
      break;
 8002db2:	e014      	b.n	8002dde <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	0011      	movs	r1, r2
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 fb35 	bl	800342c <TIM_OC3_SetConfig>
      break;
 8002dc2:	e00c      	b.n	8002dde <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	0011      	movs	r1, r2
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 fbb3 	bl	8003538 <TIM_OC4_SetConfig>
      break;
 8002dd2:	e004      	b.n	8002dde <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002dd4:	2317      	movs	r3, #23
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
      break;
 8002ddc:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	223c      	movs	r2, #60	; 0x3c
 8002de2:	2100      	movs	r1, #0
 8002de4:	5499      	strb	r1, [r3, r2]

  return status;
 8002de6:	2317      	movs	r3, #23
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	781b      	ldrb	r3, [r3, #0]
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b006      	add	sp, #24
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2317      	movs	r3, #23
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	223c      	movs	r2, #60	; 0x3c
 8002e0c:	5c9b      	ldrb	r3, [r3, r2]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0ad      	b.n	8002f72 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	223c      	movs	r2, #60	; 0x3c
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d100      	bne.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e24:	e076      	b.n	8002f14 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0c      	cmp	r3, #12
 8002e2a:	d900      	bls.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002e2c:	e095      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d04e      	beq.n	8002ed2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d900      	bls.n	8002e3c <HAL_TIM_PWM_ConfigChannel+0x48>
 8002e3a:	e08e      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d021      	beq.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002e48:	e087      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 f9de 	bl	8003214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2108      	movs	r1, #8
 8002e64:	430a      	orrs	r2, r1
 8002e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2104      	movs	r1, #4
 8002e74:	438a      	bics	r2, r1
 8002e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6999      	ldr	r1, [r3, #24]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	619a      	str	r2, [r3, #24]
      break;
 8002e8a:	e06b      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	0011      	movs	r1, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 fa45 	bl	8003324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	0109      	lsls	r1, r1, #4
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4931      	ldr	r1, [pc, #196]	; (8002f7c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002eb8:	400a      	ands	r2, r1
 8002eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6999      	ldr	r1, [r3, #24]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	021a      	lsls	r2, r3, #8
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	619a      	str	r2, [r3, #24]
      break;
 8002ed0:	e048      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	0011      	movs	r1, r2
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 faa6 	bl	800342c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2108      	movs	r1, #8
 8002eec:	430a      	orrs	r2, r1
 8002eee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2104      	movs	r1, #4
 8002efc:	438a      	bics	r2, r1
 8002efe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69d9      	ldr	r1, [r3, #28]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	61da      	str	r2, [r3, #28]
      break;
 8002f12:	e027      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fb0b 	bl	8003538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	0109      	lsls	r1, r1, #4
 8002f30:	430a      	orrs	r2, r1
 8002f32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	490f      	ldr	r1, [pc, #60]	; (8002f7c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69d9      	ldr	r1, [r3, #28]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	021a      	lsls	r2, r3, #8
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	61da      	str	r2, [r3, #28]
      break;
 8002f58:	e004      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002f5a:	2317      	movs	r3, #23
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
      break;
 8002f62:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	223c      	movs	r2, #60	; 0x3c
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]

  return status;
 8002f6c:	2317      	movs	r3, #23
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	781b      	ldrb	r3, [r3, #0]
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b006      	add	sp, #24
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	fffffbff 	.word	0xfffffbff

08002f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	223c      	movs	r2, #60	; 0x3c
 8002f96:	5c9b      	ldrb	r3, [r3, r2]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIM_ConfigClockSource+0x20>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e0bc      	b.n	800311a <HAL_TIM_ConfigClockSource+0x19a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	223c      	movs	r2, #60	; 0x3c
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	223d      	movs	r2, #61	; 0x3d
 8002fac:	2102      	movs	r1, #2
 8002fae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2277      	movs	r2, #119	; 0x77
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	0192      	lsls	r2, r2, #6
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d040      	beq.n	800305e <HAL_TIM_ConfigClockSource+0xde>
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	0192      	lsls	r2, r2, #6
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d900      	bls.n	8002fe6 <HAL_TIM_ConfigClockSource+0x66>
 8002fe4:	e088      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0152      	lsls	r2, r2, #5
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d100      	bne.n	8002ff0 <HAL_TIM_ConfigClockSource+0x70>
 8002fee:	e088      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x182>
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	0152      	lsls	r2, r2, #5
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d900      	bls.n	8002ffa <HAL_TIM_ConfigClockSource+0x7a>
 8002ff8:	e07e      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
 8002ffa:	2b70      	cmp	r3, #112	; 0x70
 8002ffc:	d018      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0xb0>
 8002ffe:	d900      	bls.n	8003002 <HAL_TIM_ConfigClockSource+0x82>
 8003000:	e07a      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
 8003002:	2b60      	cmp	r3, #96	; 0x60
 8003004:	d04f      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0x126>
 8003006:	d900      	bls.n	800300a <HAL_TIM_ConfigClockSource+0x8a>
 8003008:	e076      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
 800300a:	2b50      	cmp	r3, #80	; 0x50
 800300c:	d03b      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0x106>
 800300e:	d900      	bls.n	8003012 <HAL_TIM_ConfigClockSource+0x92>
 8003010:	e072      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d057      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x146>
 8003016:	d900      	bls.n	800301a <HAL_TIM_ConfigClockSource+0x9a>
 8003018:	e06e      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
 800301a:	2b30      	cmp	r3, #48	; 0x30
 800301c:	d063      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x166>
 800301e:	d86b      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
 8003020:	2b20      	cmp	r3, #32
 8003022:	d060      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x166>
 8003024:	d868      	bhi.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d05d      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x166>
 800302a:	2b10      	cmp	r3, #16
 800302c:	d05b      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x166>
 800302e:	e063      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6899      	ldr	r1, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f000 fb5e 	bl	8003700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2277      	movs	r2, #119	; 0x77
 8003050:	4313      	orrs	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
      break;
 800305c:	e052      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f000 fb47 	bl	8003700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	01c9      	lsls	r1, r1, #7
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
      break;
 8003084:	e03e      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	001a      	movs	r2, r3
 8003094:	f000 faba 	bl	800360c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2150      	movs	r1, #80	; 0x50
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fb14 	bl	80036cc <TIM_ITRx_SetConfig>
      break;
 80030a4:	e02e      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	001a      	movs	r2, r3
 80030b4:	f000 fad8 	bl	8003668 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2160      	movs	r1, #96	; 0x60
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fb04 	bl	80036cc <TIM_ITRx_SetConfig>
      break;
 80030c4:	e01e      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	001a      	movs	r2, r3
 80030d4:	f000 fa9a 	bl	800360c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2140      	movs	r1, #64	; 0x40
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 faf4 	bl	80036cc <TIM_ITRx_SetConfig>
      break;
 80030e4:	e00e      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	0019      	movs	r1, r3
 80030f0:	0010      	movs	r0, r2
 80030f2:	f000 faeb 	bl	80036cc <TIM_ITRx_SetConfig>
      break;
 80030f6:	e005      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030f8:	230f      	movs	r3, #15
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
      break;
 8003100:	e000      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003102:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	223d      	movs	r2, #61	; 0x3d
 8003108:	2101      	movs	r1, #1
 800310a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	223c      	movs	r2, #60	; 0x3c
 8003110:	2100      	movs	r1, #0
 8003112:	5499      	strb	r1, [r3, r2]

  return status;
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	781b      	ldrb	r3, [r3, #0]
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	ffff00ff 	.word	0xffff00ff

08003128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <TIM_Base_SetConfig+0xd0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <TIM_Base_SetConfig+0x20>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <TIM_Base_SetConfig+0xd4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d108      	bne.n	800315a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2270      	movs	r2, #112	; 0x70
 800314c:	4393      	bics	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <TIM_Base_SetConfig+0xd0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <TIM_Base_SetConfig+0x62>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <TIM_Base_SetConfig+0xd4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00f      	beq.n	800318a <TIM_Base_SetConfig+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a24      	ldr	r2, [pc, #144]	; (8003200 <TIM_Base_SetConfig+0xd8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00b      	beq.n	800318a <TIM_Base_SetConfig+0x62>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <TIM_Base_SetConfig+0xdc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <TIM_Base_SetConfig+0x62>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a22      	ldr	r2, [pc, #136]	; (8003208 <TIM_Base_SetConfig+0xe0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_Base_SetConfig+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a21      	ldr	r2, [pc, #132]	; (800320c <TIM_Base_SetConfig+0xe4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d108      	bne.n	800319c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <TIM_Base_SetConfig+0xe8>)
 800318e:	4013      	ands	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	4393      	bics	r3, r2
 80031a2:	001a      	movs	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <TIM_Base_SetConfig+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <TIM_Base_SetConfig+0xba>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <TIM_Base_SetConfig+0xdc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <TIM_Base_SetConfig+0xba>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <TIM_Base_SetConfig+0xe0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_Base_SetConfig+0xba>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	; (800320c <TIM_Base_SetConfig+0xe4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d103      	bne.n	80031ea <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	615a      	str	r2, [r3, #20]
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40000400 	.word	0x40000400
 8003200:	40002000 	.word	0x40002000
 8003204:	40014000 	.word	0x40014000
 8003208:	40014400 	.word	0x40014400
 800320c:	40014800 	.word	0x40014800
 8003210:	fffffcff 	.word	0xfffffcff

08003214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	2201      	movs	r2, #1
 8003224:	4393      	bics	r3, r2
 8003226:	001a      	movs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2270      	movs	r2, #112	; 0x70
 8003242:	4393      	bics	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2203      	movs	r2, #3
 800324a:	4393      	bics	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2202      	movs	r2, #2
 800325c:	4393      	bics	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a27      	ldr	r2, [pc, #156]	; (800330c <TIM_OC1_SetConfig+0xf8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00b      	beq.n	800328a <TIM_OC1_SetConfig+0x76>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a26      	ldr	r2, [pc, #152]	; (8003310 <TIM_OC1_SetConfig+0xfc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <TIM_OC1_SetConfig+0x76>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <TIM_OC1_SetConfig+0x100>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d003      	beq.n	800328a <TIM_OC1_SetConfig+0x76>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a24      	ldr	r2, [pc, #144]	; (8003318 <TIM_OC1_SetConfig+0x104>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10c      	bne.n	80032a4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2208      	movs	r2, #8
 800328e:	4393      	bics	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2204      	movs	r2, #4
 80032a0:	4393      	bics	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a19      	ldr	r2, [pc, #100]	; (800330c <TIM_OC1_SetConfig+0xf8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_OC1_SetConfig+0xb0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <TIM_OC1_SetConfig+0xfc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_OC1_SetConfig+0xb0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <TIM_OC1_SetConfig+0x100>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_OC1_SetConfig+0xb0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <TIM_OC1_SetConfig+0x104>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d111      	bne.n	80032e8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <TIM_OC1_SetConfig+0x108>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <TIM_OC1_SetConfig+0x10c>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	621a      	str	r2, [r3, #32]
}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	b006      	add	sp, #24
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40014000 	.word	0x40014000
 8003314:	40014400 	.word	0x40014400
 8003318:	40014800 	.word	0x40014800
 800331c:	fffffeff 	.word	0xfffffeff
 8003320:	fffffdff 	.word	0xfffffdff

08003324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	2210      	movs	r2, #16
 8003334:	4393      	bics	r3, r2
 8003336:	001a      	movs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a2e      	ldr	r2, [pc, #184]	; (800340c <TIM_OC2_SetConfig+0xe8>)
 8003352:	4013      	ands	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a2d      	ldr	r2, [pc, #180]	; (8003410 <TIM_OC2_SetConfig+0xec>)
 800335a:	4013      	ands	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2220      	movs	r2, #32
 800336e:	4393      	bics	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a24      	ldr	r2, [pc, #144]	; (8003414 <TIM_OC2_SetConfig+0xf0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10d      	bne.n	80033a2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	4393      	bics	r3, r2
 800338c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	4393      	bics	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <TIM_OC2_SetConfig+0xf0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <TIM_OC2_SetConfig+0x9e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <TIM_OC2_SetConfig+0xf4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <TIM_OC2_SetConfig+0x9e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <TIM_OC2_SetConfig+0xf8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d003      	beq.n	80033c2 <TIM_OC2_SetConfig+0x9e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <TIM_OC2_SetConfig+0xfc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d113      	bne.n	80033ea <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4a17      	ldr	r2, [pc, #92]	; (8003424 <TIM_OC2_SetConfig+0x100>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4a16      	ldr	r2, [pc, #88]	; (8003428 <TIM_OC2_SetConfig+0x104>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b006      	add	sp, #24
 800340a:	bd80      	pop	{r7, pc}
 800340c:	ffff8fff 	.word	0xffff8fff
 8003410:	fffffcff 	.word	0xfffffcff
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800
 8003424:	fffffbff 	.word	0xfffffbff
 8003428:	fffff7ff 	.word	0xfffff7ff

0800342c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4a35      	ldr	r2, [pc, #212]	; (8003510 <TIM_OC3_SetConfig+0xe4>)
 800343c:	401a      	ands	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2270      	movs	r2, #112	; 0x70
 8003458:	4393      	bics	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2203      	movs	r2, #3
 8003460:	4393      	bics	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4a28      	ldr	r2, [pc, #160]	; (8003514 <TIM_OC3_SetConfig+0xe8>)
 8003472:	4013      	ands	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a24      	ldr	r2, [pc, #144]	; (8003518 <TIM_OC3_SetConfig+0xec>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10d      	bne.n	80034a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	4a23      	ldr	r2, [pc, #140]	; (800351c <TIM_OC3_SetConfig+0xf0>)
 800348e:	4013      	ands	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <TIM_OC3_SetConfig+0xf4>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1b      	ldr	r2, [pc, #108]	; (8003518 <TIM_OC3_SetConfig+0xec>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <TIM_OC3_SetConfig+0x9a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <TIM_OC3_SetConfig+0xf8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <TIM_OC3_SetConfig+0x9a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <TIM_OC3_SetConfig+0xfc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_OC3_SetConfig+0x9a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a1a      	ldr	r2, [pc, #104]	; (800352c <TIM_OC3_SetConfig+0x100>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d113      	bne.n	80034ee <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <TIM_OC3_SetConfig+0x104>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4a18      	ldr	r2, [pc, #96]	; (8003534 <TIM_OC3_SetConfig+0x108>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	621a      	str	r2, [r3, #32]
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b006      	add	sp, #24
 800350e:	bd80      	pop	{r7, pc}
 8003510:	fffffeff 	.word	0xfffffeff
 8003514:	fffffdff 	.word	0xfffffdff
 8003518:	40012c00 	.word	0x40012c00
 800351c:	fffff7ff 	.word	0xfffff7ff
 8003520:	fffffbff 	.word	0xfffffbff
 8003524:	40014000 	.word	0x40014000
 8003528:	40014400 	.word	0x40014400
 800352c:	40014800 	.word	0x40014800
 8003530:	ffffefff 	.word	0xffffefff
 8003534:	ffffdfff 	.word	0xffffdfff

08003538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <TIM_OC4_SetConfig+0xb0>)
 8003548:	401a      	ands	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a22      	ldr	r2, [pc, #136]	; (80035ec <TIM_OC4_SetConfig+0xb4>)
 8003564:	4013      	ands	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <TIM_OC4_SetConfig+0xb8>)
 800356c:	4013      	ands	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <TIM_OC4_SetConfig+0xbc>)
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	031b      	lsls	r3, r3, #12
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <TIM_OC4_SetConfig+0xc0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_OC4_SetConfig+0x78>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <TIM_OC4_SetConfig+0xc4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_OC4_SetConfig+0x78>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <TIM_OC4_SetConfig+0xc8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_OC4_SetConfig+0x78>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <TIM_OC4_SetConfig+0xcc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d109      	bne.n	80035c4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <TIM_OC4_SetConfig+0xd0>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b006      	add	sp, #24
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	ffffefff 	.word	0xffffefff
 80035ec:	ffff8fff 	.word	0xffff8fff
 80035f0:	fffffcff 	.word	0xfffffcff
 80035f4:	ffffdfff 	.word	0xffffdfff
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800
 8003608:	ffffbfff 	.word	0xffffbfff

0800360c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	2201      	movs	r2, #1
 8003624:	4393      	bics	r3, r2
 8003626:	001a      	movs	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	22f0      	movs	r2, #240	; 0xf0
 8003636:	4393      	bics	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	220a      	movs	r2, #10
 8003648:	4393      	bics	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	621a      	str	r2, [r3, #32]
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b006      	add	sp, #24
 8003666:	bd80      	pop	{r7, pc}

08003668 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	2210      	movs	r2, #16
 800367a:	4393      	bics	r3, r2
 800367c:	001a      	movs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <TIM_TI2_ConfigInputStage+0x60>)
 8003692:	4013      	ands	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	031b      	lsls	r3, r3, #12
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	22a0      	movs	r2, #160	; 0xa0
 80036a4:	4393      	bics	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	621a      	str	r2, [r3, #32]
}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b006      	add	sp, #24
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	ffff0fff 	.word	0xffff0fff

080036cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2270      	movs	r2, #112	; 0x70
 80036e0:	4393      	bics	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	2207      	movs	r2, #7
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	609a      	str	r2, [r3, #8]
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <TIM_ETR_SetConfig+0x3c>)
 8003718:	4013      	ands	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	021a      	lsls	r2, r3, #8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	431a      	orrs	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4313      	orrs	r3, r2
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bd80      	pop	{r7, pc}
 800373c:	ffff00ff 	.word	0xffff00ff

08003740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	221f      	movs	r2, #31
 8003750:	4013      	ands	r3, r2
 8003752:	2201      	movs	r2, #1
 8003754:	409a      	lsls	r2, r3
 8003756:	0013      	movs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	43d2      	mvns	r2, r2
 8003762:	401a      	ands	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	211f      	movs	r1, #31
 8003770:	400b      	ands	r3, r1
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4099      	lsls	r1, r3
 8003776:	000b      	movs	r3, r1
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b006      	add	sp, #24
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	223c      	movs	r2, #60	; 0x3c
 8003796:	5c9b      	ldrb	r3, [r3, r2]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800379c:	2302      	movs	r3, #2
 800379e:	e041      	b.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	223c      	movs	r2, #60	; 0x3c
 80037a4:	2101      	movs	r1, #1
 80037a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	223d      	movs	r2, #61	; 0x3d
 80037ac:	2102      	movs	r1, #2
 80037ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2270      	movs	r2, #112	; 0x70
 80037c4:	4393      	bics	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a11      	ldr	r2, [pc, #68]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10c      	bne.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	4393      	bics	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	223d      	movs	r2, #61	; 0x3d
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	223c      	movs	r2, #60	; 0x3c
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b004      	add	sp, #16
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40014000 	.word	0x40014000

08003838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	223c      	movs	r2, #60	; 0x3c
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003850:	2302      	movs	r3, #2
 8003852:	e03e      	b.n	80038d2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	223c      	movs	r2, #60	; 0x3c
 8003858:	2101      	movs	r1, #1
 800385a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	22ff      	movs	r2, #255	; 0xff
 8003860:	4393      	bics	r3, r2
 8003862:	001a      	movs	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003870:	401a      	ands	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800387e:	401a      	ands	r2, r3
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800388c:	401a      	ands	r2, r3
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800389a:	401a      	ands	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80038a8:	401a      	ands	r2, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80038b6:	401a      	ands	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223c      	movs	r2, #60	; 0x3c
 80038cc:	2100      	movs	r1, #0
 80038ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	fffffcff 	.word	0xfffffcff
 80038e0:	fffffbff 	.word	0xfffffbff
 80038e4:	fffff7ff 	.word	0xfffff7ff
 80038e8:	ffffefff 	.word	0xffffefff
 80038ec:	ffffdfff 	.word	0xffffdfff
 80038f0:	ffffbfff 	.word	0xffffbfff

080038f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e044      	b.n	80039b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2274      	movs	r2, #116	; 0x74
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f7fd fa8f 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2224      	movs	r2, #36	; 0x24
 8003942:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	438a      	bics	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f9b6 	bl	8003cc8 <UART_SetConfig>
 800395c:	0003      	movs	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e024      	b.n	80039b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f000 fae9 	bl	8003f48 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	490d      	ldr	r1, [pc, #52]	; (80039b8 <HAL_UART_Init+0xa4>)
 8003982:	400a      	ands	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2108      	movs	r1, #8
 8003992:	438a      	bics	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 fb81 	bl	80040b0 <UART_CheckIdleState>
 80039ae:	0003      	movs	r3, r0
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b002      	add	sp, #8
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	fffff7ff 	.word	0xfffff7ff

080039bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	1dbb      	adds	r3, r7, #6
 80039ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d000      	beq.n	80039d6 <HAL_UART_Transmit+0x1a>
 80039d4:	e096      	b.n	8003b04 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_UART_Transmit+0x28>
 80039dc:	1dbb      	adds	r3, r7, #6
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e08e      	b.n	8003b06 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	015b      	lsls	r3, r3, #5
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d109      	bne.n	8003a08 <HAL_UART_Transmit+0x4c>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2201      	movs	r2, #1
 8003a00:	4013      	ands	r3, r2
 8003a02:	d001      	beq.n	8003a08 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e07e      	b.n	8003b06 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2274      	movs	r2, #116	; 0x74
 8003a0c:	5c9b      	ldrb	r3, [r3, r2]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Transmit+0x5a>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e077      	b.n	8003b06 <HAL_UART_Transmit+0x14a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2274      	movs	r2, #116	; 0x74
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2280      	movs	r2, #128	; 0x80
 8003a22:	2100      	movs	r1, #0
 8003a24:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2221      	movs	r2, #33	; 0x21
 8003a2a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd fbc4 	bl	80011b8 <HAL_GetTick>
 8003a30:	0003      	movs	r3, r0
 8003a32:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1dba      	adds	r2, r7, #6
 8003a38:	2150      	movs	r1, #80	; 0x50
 8003a3a:	8812      	ldrh	r2, [r2, #0]
 8003a3c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1dba      	adds	r2, r7, #6
 8003a42:	2152      	movs	r1, #82	; 0x52
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	015b      	lsls	r3, r3, #5
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d108      	bne.n	8003a66 <HAL_UART_Transmit+0xaa>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	e003      	b.n	8003a6e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2274      	movs	r2, #116	; 0x74
 8003a72:	2100      	movs	r1, #0
 8003a74:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003a76:	e02d      	b.n	8003ad4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	0013      	movs	r3, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	f000 fb5b 	bl	8004140 <UART_WaitOnFlagUntilTimeout>
 8003a8a:	1e03      	subs	r3, r0, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e039      	b.n	8003b06 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	881a      	ldrh	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	05d2      	lsls	r2, r2, #23
 8003aa2:	0dd2      	lsrs	r2, r2, #23
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	3302      	adds	r3, #2
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e008      	b.n	8003ac2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2252      	movs	r2, #82	; 0x52
 8003ac6:	5a9b      	ldrh	r3, [r3, r2]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b299      	uxth	r1, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2252      	movs	r2, #82	; 0x52
 8003ad2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2252      	movs	r2, #82	; 0x52
 8003ad8:	5a9b      	ldrh	r3, [r3, r2]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1cb      	bne.n	8003a78 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	0013      	movs	r3, r2
 8003aea:	2200      	movs	r2, #0
 8003aec:	2140      	movs	r1, #64	; 0x40
 8003aee:	f000 fb27 	bl	8004140 <UART_WaitOnFlagUntilTimeout>
 8003af2:	1e03      	subs	r3, r0, #0
 8003af4:	d001      	beq.n	8003afa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e005      	b.n	8003b06 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b008      	add	sp, #32
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d000      	beq.n	8003b2a <HAL_UART_Receive+0x1a>
 8003b28:	e0c6      	b.n	8003cb8 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_UART_Receive+0x28>
 8003b30:	1dbb      	adds	r3, r7, #6
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0be      	b.n	8003cba <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	015b      	lsls	r3, r3, #5
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d109      	bne.n	8003b5c <HAL_UART_Receive+0x4c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d105      	bne.n	8003b5c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2201      	movs	r2, #1
 8003b54:	4013      	ands	r3, r2
 8003b56:	d001      	beq.n	8003b5c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0ae      	b.n	8003cba <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2274      	movs	r2, #116	; 0x74
 8003b60:	5c9b      	ldrb	r3, [r3, r2]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Receive+0x5a>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e0a7      	b.n	8003cba <HAL_UART_Receive+0x1aa>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2274      	movs	r2, #116	; 0x74
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2280      	movs	r2, #128	; 0x80
 8003b76:	2100      	movs	r1, #0
 8003b78:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2222      	movs	r2, #34	; 0x22
 8003b7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b86:	f7fd fb17 	bl	80011b8 <HAL_GetTick>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1dba      	adds	r2, r7, #6
 8003b92:	2158      	movs	r1, #88	; 0x58
 8003b94:	8812      	ldrh	r2, [r2, #0]
 8003b96:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1dba      	adds	r2, r7, #6
 8003b9c:	215a      	movs	r1, #90	; 0x5a
 8003b9e:	8812      	ldrh	r2, [r2, #0]
 8003ba0:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	015b      	lsls	r3, r3, #5
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d10d      	bne.n	8003bca <HAL_UART_Receive+0xba>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <HAL_UART_Receive+0xb0>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	225c      	movs	r2, #92	; 0x5c
 8003bba:	4942      	ldr	r1, [pc, #264]	; (8003cc4 <HAL_UART_Receive+0x1b4>)
 8003bbc:	5299      	strh	r1, [r3, r2]
 8003bbe:	e01a      	b.n	8003bf6 <HAL_UART_Receive+0xe6>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	225c      	movs	r2, #92	; 0x5c
 8003bc4:	21ff      	movs	r1, #255	; 0xff
 8003bc6:	5299      	strh	r1, [r3, r2]
 8003bc8:	e015      	b.n	8003bf6 <HAL_UART_Receive+0xe6>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_UART_Receive+0xde>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <HAL_UART_Receive+0xd4>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	225c      	movs	r2, #92	; 0x5c
 8003bde:	21ff      	movs	r1, #255	; 0xff
 8003be0:	5299      	strh	r1, [r3, r2]
 8003be2:	e008      	b.n	8003bf6 <HAL_UART_Receive+0xe6>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	225c      	movs	r2, #92	; 0x5c
 8003be8:	217f      	movs	r1, #127	; 0x7f
 8003bea:	5299      	strh	r1, [r3, r2]
 8003bec:	e003      	b.n	8003bf6 <HAL_UART_Receive+0xe6>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	225c      	movs	r2, #92	; 0x5c
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003bf6:	2312      	movs	r3, #18
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	215c      	movs	r1, #92	; 0x5c
 8003bfe:	5a52      	ldrh	r2, [r2, r1]
 8003c00:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	015b      	lsls	r3, r3, #5
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d108      	bne.n	8003c20 <HAL_UART_Receive+0x110>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e003      	b.n	8003c28 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2274      	movs	r2, #116	; 0x74
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c30:	e037      	b.n	8003ca2 <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	0013      	movs	r3, r2
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2120      	movs	r1, #32
 8003c40:	f000 fa7e 	bl	8004140 <UART_WaitOnFlagUntilTimeout>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e036      	b.n	8003cba <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10e      	bne.n	8003c70 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2212      	movs	r2, #18
 8003c5c:	18ba      	adds	r2, r7, r2
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	4013      	ands	r3, r2
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e00f      	b.n	8003c90 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2212      	movs	r2, #18
 8003c7c:	18ba      	adds	r2, r7, r2
 8003c7e:	8812      	ldrh	r2, [r2, #0]
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	4013      	ands	r3, r2
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	225a      	movs	r2, #90	; 0x5a
 8003c94:	5a9b      	ldrh	r3, [r3, r2]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b299      	uxth	r1, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	225a      	movs	r2, #90	; 0x5a
 8003ca0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	225a      	movs	r2, #90	; 0x5a
 8003ca6:	5a9b      	ldrh	r3, [r3, r2]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1c1      	bne.n	8003c32 <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b008      	add	sp, #32
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	000001ff 	.word	0x000001ff

08003cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cd0:	231e      	movs	r3, #30
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a8d      	ldr	r2, [pc, #564]	; (8003f2c <UART_SetConfig+0x264>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a88      	ldr	r2, [pc, #544]	; (8003f30 <UART_SetConfig+0x268>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a7f      	ldr	r2, [pc, #508]	; (8003f34 <UART_SetConfig+0x26c>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	0019      	movs	r1, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7b      	ldr	r2, [pc, #492]	; (8003f38 <UART_SetConfig+0x270>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d127      	bne.n	8003d9e <UART_SetConfig+0xd6>
 8003d4e:	4b7b      	ldr	r3, [pc, #492]	; (8003f3c <UART_SetConfig+0x274>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	2203      	movs	r2, #3
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d00d      	beq.n	8003d76 <UART_SetConfig+0xae>
 8003d5a:	d81b      	bhi.n	8003d94 <UART_SetConfig+0xcc>
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d014      	beq.n	8003d8a <UART_SetConfig+0xc2>
 8003d60:	d818      	bhi.n	8003d94 <UART_SetConfig+0xcc>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <UART_SetConfig+0xa4>
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d00a      	beq.n	8003d80 <UART_SetConfig+0xb8>
 8003d6a:	e013      	b.n	8003d94 <UART_SetConfig+0xcc>
 8003d6c:	231f      	movs	r3, #31
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e021      	b.n	8003dba <UART_SetConfig+0xf2>
 8003d76:	231f      	movs	r3, #31
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e01c      	b.n	8003dba <UART_SetConfig+0xf2>
 8003d80:	231f      	movs	r3, #31
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	2204      	movs	r2, #4
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e017      	b.n	8003dba <UART_SetConfig+0xf2>
 8003d8a:	231f      	movs	r3, #31
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2208      	movs	r2, #8
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e012      	b.n	8003dba <UART_SetConfig+0xf2>
 8003d94:	231f      	movs	r3, #31
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2210      	movs	r2, #16
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e00d      	b.n	8003dba <UART_SetConfig+0xf2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a67      	ldr	r2, [pc, #412]	; (8003f40 <UART_SetConfig+0x278>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d104      	bne.n	8003db2 <UART_SetConfig+0xea>
 8003da8:	231f      	movs	r3, #31
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e003      	b.n	8003dba <UART_SetConfig+0xf2>
 8003db2:	231f      	movs	r3, #31
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	2210      	movs	r2, #16
 8003db8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d15d      	bne.n	8003e82 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003dc6:	231f      	movs	r3, #31
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d015      	beq.n	8003dfc <UART_SetConfig+0x134>
 8003dd0:	dc18      	bgt.n	8003e04 <UART_SetConfig+0x13c>
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d00d      	beq.n	8003df2 <UART_SetConfig+0x12a>
 8003dd6:	dc15      	bgt.n	8003e04 <UART_SetConfig+0x13c>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <UART_SetConfig+0x11a>
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d005      	beq.n	8003dec <UART_SetConfig+0x124>
 8003de0:	e010      	b.n	8003e04 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7fe fb47 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003de6:	0003      	movs	r3, r0
 8003de8:	61bb      	str	r3, [r7, #24]
        break;
 8003dea:	e012      	b.n	8003e12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b55      	ldr	r3, [pc, #340]	; (8003f44 <UART_SetConfig+0x27c>)
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e00f      	b.n	8003e12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fad1 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003df6:	0003      	movs	r3, r0
 8003df8:	61bb      	str	r3, [r7, #24]
        break;
 8003dfa:	e00a      	b.n	8003e12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	61bb      	str	r3, [r7, #24]
        break;
 8003e02:	e006      	b.n	8003e12 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e08:	231e      	movs	r3, #30
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
        break;
 8003e10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d100      	bne.n	8003e1a <UART_SetConfig+0x152>
 8003e18:	e07b      	b.n	8003f12 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	005a      	lsls	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	18d2      	adds	r2, r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	0010      	movs	r0, r2
 8003e2e:	f7fc f975 	bl	800011c <__udivsi3>
 8003e32:	0003      	movs	r3, r0
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	d91c      	bls.n	8003e78 <UART_SetConfig+0x1b0>
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	025b      	lsls	r3, r3, #9
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d217      	bcs.n	8003e78 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	200e      	movs	r0, #14
 8003e4e:	183b      	adds	r3, r7, r0
 8003e50:	210f      	movs	r1, #15
 8003e52:	438a      	bics	r2, r1
 8003e54:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2207      	movs	r2, #7
 8003e5e:	4013      	ands	r3, r2
 8003e60:	b299      	uxth	r1, r3
 8003e62:	183b      	adds	r3, r7, r0
 8003e64:	183a      	adds	r2, r7, r0
 8003e66:	8812      	ldrh	r2, [r2, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	183a      	adds	r2, r7, r0
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	e04c      	b.n	8003f12 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e78:	231e      	movs	r3, #30
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e047      	b.n	8003f12 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e82:	231f      	movs	r3, #31
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d015      	beq.n	8003eb8 <UART_SetConfig+0x1f0>
 8003e8c:	dc18      	bgt.n	8003ec0 <UART_SetConfig+0x1f8>
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d00d      	beq.n	8003eae <UART_SetConfig+0x1e6>
 8003e92:	dc15      	bgt.n	8003ec0 <UART_SetConfig+0x1f8>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <UART_SetConfig+0x1d6>
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d005      	beq.n	8003ea8 <UART_SetConfig+0x1e0>
 8003e9c:	e010      	b.n	8003ec0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9e:	f7fe fae9 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	61bb      	str	r3, [r7, #24]
        break;
 8003ea6:	e012      	b.n	8003ece <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <UART_SetConfig+0x27c>)
 8003eaa:	61bb      	str	r3, [r7, #24]
        break;
 8003eac:	e00f      	b.n	8003ece <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fe fa73 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	61bb      	str	r3, [r7, #24]
        break;
 8003eb6:	e00a      	b.n	8003ece <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	61bb      	str	r3, [r7, #24]
        break;
 8003ebe:	e006      	b.n	8003ece <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ec4:	231e      	movs	r3, #30
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
        break;
 8003ecc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01e      	beq.n	8003f12 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	085a      	lsrs	r2, r3, #1
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	18d2      	adds	r2, r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	0010      	movs	r0, r2
 8003ee6:	f7fc f919 	bl	800011c <__udivsi3>
 8003eea:	0003      	movs	r3, r0
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b0f      	cmp	r3, #15
 8003ef4:	d909      	bls.n	8003f0a <UART_SetConfig+0x242>
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	025b      	lsls	r3, r3, #9
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d204      	bcs.n	8003f0a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	60da      	str	r2, [r3, #12]
 8003f08:	e003      	b.n	8003f12 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0a:	231e      	movs	r3, #30
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f1e:	231e      	movs	r3, #30
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	781b      	ldrb	r3, [r3, #0]
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b008      	add	sp, #32
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	ffff69f3 	.word	0xffff69f3
 8003f30:	ffffcfff 	.word	0xffffcfff
 8003f34:	fffff4ff 	.word	0xfffff4ff
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40004400 	.word	0x40004400
 8003f44:	007a1200 	.word	0x007a1200

08003f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	2201      	movs	r2, #1
 8003f56:	4013      	ands	r3, r2
 8003f58:	d00b      	beq.n	8003f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a4a      	ldr	r2, [pc, #296]	; (800408c <UART_AdvFeatureConfig+0x144>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	0019      	movs	r1, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d00b      	beq.n	8003f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4a43      	ldr	r2, [pc, #268]	; (8004090 <UART_AdvFeatureConfig+0x148>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2204      	movs	r2, #4
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a3b      	ldr	r2, [pc, #236]	; (8004094 <UART_AdvFeatureConfig+0x14c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2208      	movs	r2, #8
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d00b      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4a34      	ldr	r2, [pc, #208]	; (8004098 <UART_AdvFeatureConfig+0x150>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	2210      	movs	r2, #16
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	; (800409c <UART_AdvFeatureConfig+0x154>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	0019      	movs	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2220      	movs	r2, #32
 8004000:	4013      	ands	r3, r2
 8004002:	d00b      	beq.n	800401c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <UART_AdvFeatureConfig+0x158>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2240      	movs	r2, #64	; 0x40
 8004022:	4013      	ands	r3, r2
 8004024:	d01d      	beq.n	8004062 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <UART_AdvFeatureConfig+0x15c>)
 800402e:	4013      	ands	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	035b      	lsls	r3, r3, #13
 8004046:	429a      	cmp	r2, r3
 8004048:	d10b      	bne.n	8004062 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <UART_AdvFeatureConfig+0x160>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	4013      	ands	r3, r2
 800406a:	d00b      	beq.n	8004084 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <UART_AdvFeatureConfig+0x164>)
 8004074:	4013      	ands	r3, r2
 8004076:	0019      	movs	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}
 800408c:	fffdffff 	.word	0xfffdffff
 8004090:	fffeffff 	.word	0xfffeffff
 8004094:	fffbffff 	.word	0xfffbffff
 8004098:	ffff7fff 	.word	0xffff7fff
 800409c:	ffffefff 	.word	0xffffefff
 80040a0:	ffffdfff 	.word	0xffffdfff
 80040a4:	ffefffff 	.word	0xffefffff
 80040a8:	ff9fffff 	.word	0xff9fffff
 80040ac:	fff7ffff 	.word	0xfff7ffff

080040b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	2100      	movs	r1, #0
 80040be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c0:	f7fd f87a 	bl	80011b8 <HAL_GetTick>
 80040c4:	0003      	movs	r3, r0
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2208      	movs	r2, #8
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d10c      	bne.n	80040f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	0391      	lsls	r1, r2, #14
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <UART_CheckIdleState+0x8c>)
 80040e0:	9200      	str	r2, [sp, #0]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f000 f82c 	bl	8004140 <UART_WaitOnFlagUntilTimeout>
 80040e8:	1e03      	subs	r3, r0, #0
 80040ea:	d001      	beq.n	80040f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e021      	b.n	8004134 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2204      	movs	r2, #4
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d10c      	bne.n	8004118 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2280      	movs	r2, #128	; 0x80
 8004102:	03d1      	lsls	r1, r2, #15
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <UART_CheckIdleState+0x8c>)
 8004108:	9200      	str	r2, [sp, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	f000 f818 	bl	8004140 <UART_WaitOnFlagUntilTimeout>
 8004110:	1e03      	subs	r3, r0, #0
 8004112:	d001      	beq.n	8004118 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e00d      	b.n	8004134 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2274      	movs	r2, #116	; 0x74
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b004      	add	sp, #16
 800413a:	bd80      	pop	{r7, pc}
 800413c:	01ffffff 	.word	0x01ffffff

08004140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b094      	sub	sp, #80	; 0x50
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	1dfb      	adds	r3, r7, #7
 800414e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004150:	e0a3      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004154:	3301      	adds	r3, #1
 8004156:	d100      	bne.n	800415a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004158:	e09f      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fd f82d 	bl	80011b8 <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <UART_WaitOnFlagUntilTimeout+0x30>
 800416a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800416c:	2b00      	cmp	r3, #0
 800416e:	d13d      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004170:	f3ef 8310 	mrs	r3, PRIMASK
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
 800417a:	2301      	movs	r3, #1
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	494c      	ldr	r1, [pc, #304]	; (80042c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004192:	400a      	ands	r2, r1
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	f383 8810 	msr	PRIMASK, r3
}
 80041a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a2:	f3ef 8310 	mrs	r3, PRIMASK
 80041a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80041a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	643b      	str	r3, [r7, #64]	; 0x40
 80041ac:	2301      	movs	r3, #1
 80041ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2101      	movs	r1, #1
 80041c4:	438a      	bics	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	f383 8810 	msr	PRIMASK, r3
}
 80041d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2274      	movs	r2, #116	; 0x74
 80041e4:	2100      	movs	r1, #0
 80041e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e067      	b.n	80042bc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2204      	movs	r2, #4
 80041f4:	4013      	ands	r3, r2
 80041f6:	d050      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	401a      	ands	r2, r3
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	429a      	cmp	r2, r3
 800420a:	d146      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004216:	f3ef 8310 	mrs	r3, PRIMASK
 800421a:	613b      	str	r3, [r7, #16]
  return(result);
 800421c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4923      	ldr	r1, [pc, #140]	; (80042c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004238:	400a      	ands	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004248:	f3ef 8310 	mrs	r3, PRIMASK
 800424c:	61fb      	str	r3, [r7, #28]
  return(result);
 800424e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
 8004252:	2301      	movs	r3, #1
 8004254:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2101      	movs	r1, #1
 800426a:	438a      	bics	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	f383 8810 	msr	PRIMASK, r3
}
 8004278:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	2120      	movs	r1, #32
 800428c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2274      	movs	r2, #116	; 0x74
 8004292:	2100      	movs	r1, #0
 8004294:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e010      	b.n	80042bc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	425a      	negs	r2, r3
 80042aa:	4153      	adcs	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	001a      	movs	r2, r3
 80042b0:	1dfb      	adds	r3, r7, #7
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d100      	bne.n	80042ba <UART_WaitOnFlagUntilTimeout+0x17a>
 80042b8:	e74b      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b014      	add	sp, #80	; 0x50
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	fffffe5f 	.word	0xfffffe5f

080042c8 <__errno>:
 80042c8:	4b01      	ldr	r3, [pc, #4]	; (80042d0 <__errno+0x8>)
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	4770      	bx	lr
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	2000000c 	.word	0x2000000c

080042d4 <__libc_init_array>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	2600      	movs	r6, #0
 80042d8:	4d0c      	ldr	r5, [pc, #48]	; (800430c <__libc_init_array+0x38>)
 80042da:	4c0d      	ldr	r4, [pc, #52]	; (8004310 <__libc_init_array+0x3c>)
 80042dc:	1b64      	subs	r4, r4, r5
 80042de:	10a4      	asrs	r4, r4, #2
 80042e0:	42a6      	cmp	r6, r4
 80042e2:	d109      	bne.n	80042f8 <__libc_init_array+0x24>
 80042e4:	2600      	movs	r6, #0
 80042e6:	f001 f891 	bl	800540c <_init>
 80042ea:	4d0a      	ldr	r5, [pc, #40]	; (8004314 <__libc_init_array+0x40>)
 80042ec:	4c0a      	ldr	r4, [pc, #40]	; (8004318 <__libc_init_array+0x44>)
 80042ee:	1b64      	subs	r4, r4, r5
 80042f0:	10a4      	asrs	r4, r4, #2
 80042f2:	42a6      	cmp	r6, r4
 80042f4:	d105      	bne.n	8004302 <__libc_init_array+0x2e>
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	00b3      	lsls	r3, r6, #2
 80042fa:	58eb      	ldr	r3, [r5, r3]
 80042fc:	4798      	blx	r3
 80042fe:	3601      	adds	r6, #1
 8004300:	e7ee      	b.n	80042e0 <__libc_init_array+0xc>
 8004302:	00b3      	lsls	r3, r6, #2
 8004304:	58eb      	ldr	r3, [r5, r3]
 8004306:	4798      	blx	r3
 8004308:	3601      	adds	r6, #1
 800430a:	e7f2      	b.n	80042f2 <__libc_init_array+0x1e>
 800430c:	0800555c 	.word	0x0800555c
 8004310:	0800555c 	.word	0x0800555c
 8004314:	0800555c 	.word	0x0800555c
 8004318:	08005560 	.word	0x08005560

0800431c <memset>:
 800431c:	0003      	movs	r3, r0
 800431e:	1882      	adds	r2, r0, r2
 8004320:	4293      	cmp	r3, r2
 8004322:	d100      	bne.n	8004326 <memset+0xa>
 8004324:	4770      	bx	lr
 8004326:	7019      	strb	r1, [r3, #0]
 8004328:	3301      	adds	r3, #1
 800432a:	e7f9      	b.n	8004320 <memset+0x4>

0800432c <iprintf>:
 800432c:	b40f      	push	{r0, r1, r2, r3}
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <iprintf+0x30>)
 8004330:	b513      	push	{r0, r1, r4, lr}
 8004332:	681c      	ldr	r4, [r3, #0]
 8004334:	2c00      	cmp	r4, #0
 8004336:	d005      	beq.n	8004344 <iprintf+0x18>
 8004338:	69a3      	ldr	r3, [r4, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <iprintf+0x18>
 800433e:	0020      	movs	r0, r4
 8004340:	f000 fa04 	bl	800474c <__sinit>
 8004344:	ab05      	add	r3, sp, #20
 8004346:	0020      	movs	r0, r4
 8004348:	9a04      	ldr	r2, [sp, #16]
 800434a:	68a1      	ldr	r1, [r4, #8]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	f000 fbe7 	bl	8004b20 <_vfiprintf_r>
 8004352:	bc16      	pop	{r1, r2, r4}
 8004354:	bc08      	pop	{r3}
 8004356:	b004      	add	sp, #16
 8004358:	4718      	bx	r3
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	2000000c 	.word	0x2000000c

08004360 <setvbuf>:
 8004360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004362:	001d      	movs	r5, r3
 8004364:	4b5d      	ldr	r3, [pc, #372]	; (80044dc <setvbuf+0x17c>)
 8004366:	b085      	sub	sp, #20
 8004368:	681e      	ldr	r6, [r3, #0]
 800436a:	0004      	movs	r4, r0
 800436c:	000f      	movs	r7, r1
 800436e:	9200      	str	r2, [sp, #0]
 8004370:	2e00      	cmp	r6, #0
 8004372:	d005      	beq.n	8004380 <setvbuf+0x20>
 8004374:	69b3      	ldr	r3, [r6, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <setvbuf+0x20>
 800437a:	0030      	movs	r0, r6
 800437c:	f000 f9e6 	bl	800474c <__sinit>
 8004380:	4b57      	ldr	r3, [pc, #348]	; (80044e0 <setvbuf+0x180>)
 8004382:	429c      	cmp	r4, r3
 8004384:	d161      	bne.n	800444a <setvbuf+0xea>
 8004386:	6874      	ldr	r4, [r6, #4]
 8004388:	9b00      	ldr	r3, [sp, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d005      	beq.n	800439a <setvbuf+0x3a>
 800438e:	2b01      	cmp	r3, #1
 8004390:	d900      	bls.n	8004394 <setvbuf+0x34>
 8004392:	e09d      	b.n	80044d0 <setvbuf+0x170>
 8004394:	2d00      	cmp	r5, #0
 8004396:	da00      	bge.n	800439a <setvbuf+0x3a>
 8004398:	e09a      	b.n	80044d0 <setvbuf+0x170>
 800439a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800439c:	07db      	lsls	r3, r3, #31
 800439e:	d405      	bmi.n	80043ac <setvbuf+0x4c>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	059b      	lsls	r3, r3, #22
 80043a4:	d402      	bmi.n	80043ac <setvbuf+0x4c>
 80043a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043a8:	f000 fa71 	bl	800488e <__retarget_lock_acquire_recursive>
 80043ac:	0021      	movs	r1, r4
 80043ae:	0030      	movs	r0, r6
 80043b0:	f000 f92a 	bl	8004608 <_fflush_r>
 80043b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043b6:	2900      	cmp	r1, #0
 80043b8:	d008      	beq.n	80043cc <setvbuf+0x6c>
 80043ba:	0023      	movs	r3, r4
 80043bc:	3344      	adds	r3, #68	; 0x44
 80043be:	4299      	cmp	r1, r3
 80043c0:	d002      	beq.n	80043c8 <setvbuf+0x68>
 80043c2:	0030      	movs	r0, r6
 80043c4:	f000 fadc 	bl	8004980 <_free_r>
 80043c8:	2300      	movs	r3, #0
 80043ca:	6363      	str	r3, [r4, #52]	; 0x34
 80043cc:	2300      	movs	r3, #0
 80043ce:	61a3      	str	r3, [r4, #24]
 80043d0:	6063      	str	r3, [r4, #4]
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	d503      	bpl.n	80043e0 <setvbuf+0x80>
 80043d8:	0030      	movs	r0, r6
 80043da:	6921      	ldr	r1, [r4, #16]
 80043dc:	f000 fad0 	bl	8004980 <_free_r>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	4a40      	ldr	r2, [pc, #256]	; (80044e4 <setvbuf+0x184>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	9b00      	ldr	r3, [sp, #0]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d100      	bne.n	80043f0 <setvbuf+0x90>
 80043ee:	e069      	b.n	80044c4 <setvbuf+0x164>
 80043f0:	ab03      	add	r3, sp, #12
 80043f2:	0021      	movs	r1, r4
 80043f4:	0030      	movs	r0, r6
 80043f6:	aa02      	add	r2, sp, #8
 80043f8:	f000 fa4c 	bl	8004894 <__swhatbuf_r>
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	4303      	orrs	r3, r0
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	2d00      	cmp	r5, #0
 8004404:	d12b      	bne.n	800445e <setvbuf+0xfe>
 8004406:	9d02      	ldr	r5, [sp, #8]
 8004408:	0028      	movs	r0, r5
 800440a:	f000 faaf 	bl	800496c <malloc>
 800440e:	1e07      	subs	r7, r0, #0
 8004410:	d153      	bne.n	80044ba <setvbuf+0x15a>
 8004412:	9b02      	ldr	r3, [sp, #8]
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	42ab      	cmp	r3, r5
 8004418:	d149      	bne.n	80044ae <setvbuf+0x14e>
 800441a:	2501      	movs	r5, #1
 800441c:	426d      	negs	r5, r5
 800441e:	2302      	movs	r3, #2
 8004420:	89a2      	ldrh	r2, [r4, #12]
 8004422:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004424:	4313      	orrs	r3, r2
 8004426:	2200      	movs	r2, #0
 8004428:	60a2      	str	r2, [r4, #8]
 800442a:	0022      	movs	r2, r4
 800442c:	3247      	adds	r2, #71	; 0x47
 800442e:	6022      	str	r2, [r4, #0]
 8004430:	6122      	str	r2, [r4, #16]
 8004432:	2201      	movs	r2, #1
 8004434:	b21b      	sxth	r3, r3
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	6162      	str	r2, [r4, #20]
 800443a:	4211      	tst	r1, r2
 800443c:	d134      	bne.n	80044a8 <setvbuf+0x148>
 800443e:	059b      	lsls	r3, r3, #22
 8004440:	d432      	bmi.n	80044a8 <setvbuf+0x148>
 8004442:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004444:	f000 fa24 	bl	8004890 <__retarget_lock_release_recursive>
 8004448:	e02e      	b.n	80044a8 <setvbuf+0x148>
 800444a:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <setvbuf+0x188>)
 800444c:	429c      	cmp	r4, r3
 800444e:	d101      	bne.n	8004454 <setvbuf+0xf4>
 8004450:	68b4      	ldr	r4, [r6, #8]
 8004452:	e799      	b.n	8004388 <setvbuf+0x28>
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <setvbuf+0x18c>)
 8004456:	429c      	cmp	r4, r3
 8004458:	d196      	bne.n	8004388 <setvbuf+0x28>
 800445a:	68f4      	ldr	r4, [r6, #12]
 800445c:	e794      	b.n	8004388 <setvbuf+0x28>
 800445e:	2f00      	cmp	r7, #0
 8004460:	d0d2      	beq.n	8004408 <setvbuf+0xa8>
 8004462:	69b3      	ldr	r3, [r6, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <setvbuf+0x10e>
 8004468:	0030      	movs	r0, r6
 800446a:	f000 f96f 	bl	800474c <__sinit>
 800446e:	9b00      	ldr	r3, [sp, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <setvbuf+0x11a>
 8004474:	89a2      	ldrh	r2, [r4, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	81a3      	strh	r3, [r4, #12]
 800447a:	89a2      	ldrh	r2, [r4, #12]
 800447c:	2308      	movs	r3, #8
 800447e:	0011      	movs	r1, r2
 8004480:	6027      	str	r7, [r4, #0]
 8004482:	6127      	str	r7, [r4, #16]
 8004484:	6165      	str	r5, [r4, #20]
 8004486:	4019      	ands	r1, r3
 8004488:	421a      	tst	r2, r3
 800448a:	d01f      	beq.n	80044cc <setvbuf+0x16c>
 800448c:	07d3      	lsls	r3, r2, #31
 800448e:	d51b      	bpl.n	80044c8 <setvbuf+0x168>
 8004490:	2300      	movs	r3, #0
 8004492:	426d      	negs	r5, r5
 8004494:	60a3      	str	r3, [r4, #8]
 8004496:	61a5      	str	r5, [r4, #24]
 8004498:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800449a:	2301      	movs	r3, #1
 800449c:	000d      	movs	r5, r1
 800449e:	401d      	ands	r5, r3
 80044a0:	4219      	tst	r1, r3
 80044a2:	d118      	bne.n	80044d6 <setvbuf+0x176>
 80044a4:	0593      	lsls	r3, r2, #22
 80044a6:	d5cc      	bpl.n	8004442 <setvbuf+0xe2>
 80044a8:	0028      	movs	r0, r5
 80044aa:	b005      	add	sp, #20
 80044ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ae:	9801      	ldr	r0, [sp, #4]
 80044b0:	f000 fa5c 	bl	800496c <malloc>
 80044b4:	9d01      	ldr	r5, [sp, #4]
 80044b6:	1e07      	subs	r7, r0, #0
 80044b8:	d0af      	beq.n	800441a <setvbuf+0xba>
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	89a2      	ldrh	r2, [r4, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	81a3      	strh	r3, [r4, #12]
 80044c2:	e7ce      	b.n	8004462 <setvbuf+0x102>
 80044c4:	2500      	movs	r5, #0
 80044c6:	e7aa      	b.n	800441e <setvbuf+0xbe>
 80044c8:	60a5      	str	r5, [r4, #8]
 80044ca:	e7e5      	b.n	8004498 <setvbuf+0x138>
 80044cc:	60a1      	str	r1, [r4, #8]
 80044ce:	e7e3      	b.n	8004498 <setvbuf+0x138>
 80044d0:	2501      	movs	r5, #1
 80044d2:	426d      	negs	r5, r5
 80044d4:	e7e8      	b.n	80044a8 <setvbuf+0x148>
 80044d6:	2500      	movs	r5, #0
 80044d8:	e7e6      	b.n	80044a8 <setvbuf+0x148>
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	2000000c 	.word	0x2000000c
 80044e0:	080054e8 	.word	0x080054e8
 80044e4:	fffff35c 	.word	0xfffff35c
 80044e8:	08005508 	.word	0x08005508
 80044ec:	080054c8 	.word	0x080054c8

080044f0 <__sflush_r>:
 80044f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f2:	898b      	ldrh	r3, [r1, #12]
 80044f4:	0005      	movs	r5, r0
 80044f6:	000c      	movs	r4, r1
 80044f8:	071a      	lsls	r2, r3, #28
 80044fa:	d45f      	bmi.n	80045bc <__sflush_r+0xcc>
 80044fc:	684a      	ldr	r2, [r1, #4]
 80044fe:	2a00      	cmp	r2, #0
 8004500:	dc04      	bgt.n	800450c <__sflush_r+0x1c>
 8004502:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004504:	2a00      	cmp	r2, #0
 8004506:	dc01      	bgt.n	800450c <__sflush_r+0x1c>
 8004508:	2000      	movs	r0, #0
 800450a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800450c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800450e:	2f00      	cmp	r7, #0
 8004510:	d0fa      	beq.n	8004508 <__sflush_r+0x18>
 8004512:	2200      	movs	r2, #0
 8004514:	2180      	movs	r1, #128	; 0x80
 8004516:	682e      	ldr	r6, [r5, #0]
 8004518:	602a      	str	r2, [r5, #0]
 800451a:	001a      	movs	r2, r3
 800451c:	0149      	lsls	r1, r1, #5
 800451e:	400a      	ands	r2, r1
 8004520:	420b      	tst	r3, r1
 8004522:	d034      	beq.n	800458e <__sflush_r+0x9e>
 8004524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	075b      	lsls	r3, r3, #29
 800452a:	d506      	bpl.n	800453a <__sflush_r+0x4a>
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	1ac0      	subs	r0, r0, r3
 8004530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <__sflush_r+0x4a>
 8004536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004538:	1ac0      	subs	r0, r0, r3
 800453a:	0002      	movs	r2, r0
 800453c:	6a21      	ldr	r1, [r4, #32]
 800453e:	2300      	movs	r3, #0
 8004540:	0028      	movs	r0, r5
 8004542:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004544:	47b8      	blx	r7
 8004546:	89a1      	ldrh	r1, [r4, #12]
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d106      	bne.n	800455a <__sflush_r+0x6a>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	2b1d      	cmp	r3, #29
 8004550:	d831      	bhi.n	80045b6 <__sflush_r+0xc6>
 8004552:	4a2c      	ldr	r2, [pc, #176]	; (8004604 <__sflush_r+0x114>)
 8004554:	40da      	lsrs	r2, r3
 8004556:	07d3      	lsls	r3, r2, #31
 8004558:	d52d      	bpl.n	80045b6 <__sflush_r+0xc6>
 800455a:	2300      	movs	r3, #0
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6923      	ldr	r3, [r4, #16]
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	04cb      	lsls	r3, r1, #19
 8004564:	d505      	bpl.n	8004572 <__sflush_r+0x82>
 8004566:	1c43      	adds	r3, r0, #1
 8004568:	d102      	bne.n	8004570 <__sflush_r+0x80>
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d100      	bne.n	8004572 <__sflush_r+0x82>
 8004570:	6560      	str	r0, [r4, #84]	; 0x54
 8004572:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004574:	602e      	str	r6, [r5, #0]
 8004576:	2900      	cmp	r1, #0
 8004578:	d0c6      	beq.n	8004508 <__sflush_r+0x18>
 800457a:	0023      	movs	r3, r4
 800457c:	3344      	adds	r3, #68	; 0x44
 800457e:	4299      	cmp	r1, r3
 8004580:	d002      	beq.n	8004588 <__sflush_r+0x98>
 8004582:	0028      	movs	r0, r5
 8004584:	f000 f9fc 	bl	8004980 <_free_r>
 8004588:	2000      	movs	r0, #0
 800458a:	6360      	str	r0, [r4, #52]	; 0x34
 800458c:	e7bd      	b.n	800450a <__sflush_r+0x1a>
 800458e:	2301      	movs	r3, #1
 8004590:	0028      	movs	r0, r5
 8004592:	6a21      	ldr	r1, [r4, #32]
 8004594:	47b8      	blx	r7
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	d1c5      	bne.n	8004526 <__sflush_r+0x36>
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0c2      	beq.n	8004526 <__sflush_r+0x36>
 80045a0:	2b1d      	cmp	r3, #29
 80045a2:	d001      	beq.n	80045a8 <__sflush_r+0xb8>
 80045a4:	2b16      	cmp	r3, #22
 80045a6:	d101      	bne.n	80045ac <__sflush_r+0xbc>
 80045a8:	602e      	str	r6, [r5, #0]
 80045aa:	e7ad      	b.n	8004508 <__sflush_r+0x18>
 80045ac:	2340      	movs	r3, #64	; 0x40
 80045ae:	89a2      	ldrh	r2, [r4, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	e7a9      	b.n	800450a <__sflush_r+0x1a>
 80045b6:	2340      	movs	r3, #64	; 0x40
 80045b8:	430b      	orrs	r3, r1
 80045ba:	e7fa      	b.n	80045b2 <__sflush_r+0xc2>
 80045bc:	690f      	ldr	r7, [r1, #16]
 80045be:	2f00      	cmp	r7, #0
 80045c0:	d0a2      	beq.n	8004508 <__sflush_r+0x18>
 80045c2:	680a      	ldr	r2, [r1, #0]
 80045c4:	600f      	str	r7, [r1, #0]
 80045c6:	1bd2      	subs	r2, r2, r7
 80045c8:	9201      	str	r2, [sp, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	079b      	lsls	r3, r3, #30
 80045ce:	d100      	bne.n	80045d2 <__sflush_r+0xe2>
 80045d0:	694a      	ldr	r2, [r1, #20]
 80045d2:	60a2      	str	r2, [r4, #8]
 80045d4:	9b01      	ldr	r3, [sp, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dc00      	bgt.n	80045dc <__sflush_r+0xec>
 80045da:	e795      	b.n	8004508 <__sflush_r+0x18>
 80045dc:	003a      	movs	r2, r7
 80045de:	0028      	movs	r0, r5
 80045e0:	9b01      	ldr	r3, [sp, #4]
 80045e2:	6a21      	ldr	r1, [r4, #32]
 80045e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045e6:	47b0      	blx	r6
 80045e8:	2800      	cmp	r0, #0
 80045ea:	dc06      	bgt.n	80045fa <__sflush_r+0x10a>
 80045ec:	2340      	movs	r3, #64	; 0x40
 80045ee:	2001      	movs	r0, #1
 80045f0:	89a2      	ldrh	r2, [r4, #12]
 80045f2:	4240      	negs	r0, r0
 80045f4:	4313      	orrs	r3, r2
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	e787      	b.n	800450a <__sflush_r+0x1a>
 80045fa:	9b01      	ldr	r3, [sp, #4]
 80045fc:	183f      	adds	r7, r7, r0
 80045fe:	1a1b      	subs	r3, r3, r0
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	e7e7      	b.n	80045d4 <__sflush_r+0xe4>
 8004604:	20400001 	.word	0x20400001

08004608 <_fflush_r>:
 8004608:	690b      	ldr	r3, [r1, #16]
 800460a:	b570      	push	{r4, r5, r6, lr}
 800460c:	0005      	movs	r5, r0
 800460e:	000c      	movs	r4, r1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <_fflush_r+0x12>
 8004614:	2500      	movs	r5, #0
 8004616:	0028      	movs	r0, r5
 8004618:	bd70      	pop	{r4, r5, r6, pc}
 800461a:	2800      	cmp	r0, #0
 800461c:	d004      	beq.n	8004628 <_fflush_r+0x20>
 800461e:	6983      	ldr	r3, [r0, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <_fflush_r+0x20>
 8004624:	f000 f892 	bl	800474c <__sinit>
 8004628:	4b14      	ldr	r3, [pc, #80]	; (800467c <_fflush_r+0x74>)
 800462a:	429c      	cmp	r4, r3
 800462c:	d11b      	bne.n	8004666 <_fflush_r+0x5e>
 800462e:	686c      	ldr	r4, [r5, #4]
 8004630:	220c      	movs	r2, #12
 8004632:	5ea3      	ldrsh	r3, [r4, r2]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ed      	beq.n	8004614 <_fflush_r+0xc>
 8004638:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800463a:	07d2      	lsls	r2, r2, #31
 800463c:	d404      	bmi.n	8004648 <_fflush_r+0x40>
 800463e:	059b      	lsls	r3, r3, #22
 8004640:	d402      	bmi.n	8004648 <_fflush_r+0x40>
 8004642:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004644:	f000 f923 	bl	800488e <__retarget_lock_acquire_recursive>
 8004648:	0028      	movs	r0, r5
 800464a:	0021      	movs	r1, r4
 800464c:	f7ff ff50 	bl	80044f0 <__sflush_r>
 8004650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004652:	0005      	movs	r5, r0
 8004654:	07db      	lsls	r3, r3, #31
 8004656:	d4de      	bmi.n	8004616 <_fflush_r+0xe>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	059b      	lsls	r3, r3, #22
 800465c:	d4db      	bmi.n	8004616 <_fflush_r+0xe>
 800465e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004660:	f000 f916 	bl	8004890 <__retarget_lock_release_recursive>
 8004664:	e7d7      	b.n	8004616 <_fflush_r+0xe>
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <_fflush_r+0x78>)
 8004668:	429c      	cmp	r4, r3
 800466a:	d101      	bne.n	8004670 <_fflush_r+0x68>
 800466c:	68ac      	ldr	r4, [r5, #8]
 800466e:	e7df      	b.n	8004630 <_fflush_r+0x28>
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <_fflush_r+0x7c>)
 8004672:	429c      	cmp	r4, r3
 8004674:	d1dc      	bne.n	8004630 <_fflush_r+0x28>
 8004676:	68ec      	ldr	r4, [r5, #12]
 8004678:	e7da      	b.n	8004630 <_fflush_r+0x28>
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	080054e8 	.word	0x080054e8
 8004680:	08005508 	.word	0x08005508
 8004684:	080054c8 	.word	0x080054c8

08004688 <std>:
 8004688:	2300      	movs	r3, #0
 800468a:	b510      	push	{r4, lr}
 800468c:	0004      	movs	r4, r0
 800468e:	6003      	str	r3, [r0, #0]
 8004690:	6043      	str	r3, [r0, #4]
 8004692:	6083      	str	r3, [r0, #8]
 8004694:	8181      	strh	r1, [r0, #12]
 8004696:	6643      	str	r3, [r0, #100]	; 0x64
 8004698:	0019      	movs	r1, r3
 800469a:	81c2      	strh	r2, [r0, #14]
 800469c:	6103      	str	r3, [r0, #16]
 800469e:	6143      	str	r3, [r0, #20]
 80046a0:	6183      	str	r3, [r0, #24]
 80046a2:	2208      	movs	r2, #8
 80046a4:	305c      	adds	r0, #92	; 0x5c
 80046a6:	f7ff fe39 	bl	800431c <memset>
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <std+0x38>)
 80046ac:	6263      	str	r3, [r4, #36]	; 0x24
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <std+0x3c>)
 80046b0:	6224      	str	r4, [r4, #32]
 80046b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <std+0x40>)
 80046b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <std+0x44>)
 80046ba:	6323      	str	r3, [r4, #48]	; 0x30
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	080050bd 	.word	0x080050bd
 80046c4:	080050e5 	.word	0x080050e5
 80046c8:	0800511d 	.word	0x0800511d
 80046cc:	08005149 	.word	0x08005149

080046d0 <_cleanup_r>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4902      	ldr	r1, [pc, #8]	; (80046dc <_cleanup_r+0xc>)
 80046d4:	f000 f8ba 	bl	800484c <_fwalk_reent>
 80046d8:	bd10      	pop	{r4, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	08004609 	.word	0x08004609

080046e0 <__sfmoreglue>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	2568      	movs	r5, #104	; 0x68
 80046e4:	1e4a      	subs	r2, r1, #1
 80046e6:	4355      	muls	r5, r2
 80046e8:	000e      	movs	r6, r1
 80046ea:	0029      	movs	r1, r5
 80046ec:	3174      	adds	r1, #116	; 0x74
 80046ee:	f000 f991 	bl	8004a14 <_malloc_r>
 80046f2:	1e04      	subs	r4, r0, #0
 80046f4:	d008      	beq.n	8004708 <__sfmoreglue+0x28>
 80046f6:	2100      	movs	r1, #0
 80046f8:	002a      	movs	r2, r5
 80046fa:	6001      	str	r1, [r0, #0]
 80046fc:	6046      	str	r6, [r0, #4]
 80046fe:	300c      	adds	r0, #12
 8004700:	60a0      	str	r0, [r4, #8]
 8004702:	3268      	adds	r2, #104	; 0x68
 8004704:	f7ff fe0a 	bl	800431c <memset>
 8004708:	0020      	movs	r0, r4
 800470a:	bd70      	pop	{r4, r5, r6, pc}

0800470c <__sfp_lock_acquire>:
 800470c:	b510      	push	{r4, lr}
 800470e:	4802      	ldr	r0, [pc, #8]	; (8004718 <__sfp_lock_acquire+0xc>)
 8004710:	f000 f8bd 	bl	800488e <__retarget_lock_acquire_recursive>
 8004714:	bd10      	pop	{r4, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	200001f8 	.word	0x200001f8

0800471c <__sfp_lock_release>:
 800471c:	b510      	push	{r4, lr}
 800471e:	4802      	ldr	r0, [pc, #8]	; (8004728 <__sfp_lock_release+0xc>)
 8004720:	f000 f8b6 	bl	8004890 <__retarget_lock_release_recursive>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	200001f8 	.word	0x200001f8

0800472c <__sinit_lock_acquire>:
 800472c:	b510      	push	{r4, lr}
 800472e:	4802      	ldr	r0, [pc, #8]	; (8004738 <__sinit_lock_acquire+0xc>)
 8004730:	f000 f8ad 	bl	800488e <__retarget_lock_acquire_recursive>
 8004734:	bd10      	pop	{r4, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	200001f3 	.word	0x200001f3

0800473c <__sinit_lock_release>:
 800473c:	b510      	push	{r4, lr}
 800473e:	4802      	ldr	r0, [pc, #8]	; (8004748 <__sinit_lock_release+0xc>)
 8004740:	f000 f8a6 	bl	8004890 <__retarget_lock_release_recursive>
 8004744:	bd10      	pop	{r4, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	200001f3 	.word	0x200001f3

0800474c <__sinit>:
 800474c:	b513      	push	{r0, r1, r4, lr}
 800474e:	0004      	movs	r4, r0
 8004750:	f7ff ffec 	bl	800472c <__sinit_lock_acquire>
 8004754:	69a3      	ldr	r3, [r4, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <__sinit+0x14>
 800475a:	f7ff ffef 	bl	800473c <__sinit_lock_release>
 800475e:	bd13      	pop	{r0, r1, r4, pc}
 8004760:	64a3      	str	r3, [r4, #72]	; 0x48
 8004762:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004764:	6523      	str	r3, [r4, #80]	; 0x50
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <__sinit+0x68>)
 8004768:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <__sinit+0x6c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	62a2      	str	r2, [r4, #40]	; 0x28
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	42a3      	cmp	r3, r4
 8004772:	d101      	bne.n	8004778 <__sinit+0x2c>
 8004774:	2301      	movs	r3, #1
 8004776:	61a3      	str	r3, [r4, #24]
 8004778:	0020      	movs	r0, r4
 800477a:	f000 f81f 	bl	80047bc <__sfp>
 800477e:	6060      	str	r0, [r4, #4]
 8004780:	0020      	movs	r0, r4
 8004782:	f000 f81b 	bl	80047bc <__sfp>
 8004786:	60a0      	str	r0, [r4, #8]
 8004788:	0020      	movs	r0, r4
 800478a:	f000 f817 	bl	80047bc <__sfp>
 800478e:	2200      	movs	r2, #0
 8004790:	2104      	movs	r1, #4
 8004792:	60e0      	str	r0, [r4, #12]
 8004794:	6860      	ldr	r0, [r4, #4]
 8004796:	f7ff ff77 	bl	8004688 <std>
 800479a:	2201      	movs	r2, #1
 800479c:	2109      	movs	r1, #9
 800479e:	68a0      	ldr	r0, [r4, #8]
 80047a0:	f7ff ff72 	bl	8004688 <std>
 80047a4:	2202      	movs	r2, #2
 80047a6:	2112      	movs	r1, #18
 80047a8:	68e0      	ldr	r0, [r4, #12]
 80047aa:	f7ff ff6d 	bl	8004688 <std>
 80047ae:	2301      	movs	r3, #1
 80047b0:	61a3      	str	r3, [r4, #24]
 80047b2:	e7d2      	b.n	800475a <__sinit+0xe>
 80047b4:	080054c4 	.word	0x080054c4
 80047b8:	080046d1 	.word	0x080046d1

080047bc <__sfp>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	0007      	movs	r7, r0
 80047c0:	f7ff ffa4 	bl	800470c <__sfp_lock_acquire>
 80047c4:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <__sfp+0x88>)
 80047c6:	681e      	ldr	r6, [r3, #0]
 80047c8:	69b3      	ldr	r3, [r6, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <__sfp+0x18>
 80047ce:	0030      	movs	r0, r6
 80047d0:	f7ff ffbc 	bl	800474c <__sinit>
 80047d4:	3648      	adds	r6, #72	; 0x48
 80047d6:	68b4      	ldr	r4, [r6, #8]
 80047d8:	6873      	ldr	r3, [r6, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	d504      	bpl.n	80047e8 <__sfp+0x2c>
 80047de:	6833      	ldr	r3, [r6, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d022      	beq.n	800482a <__sfp+0x6e>
 80047e4:	6836      	ldr	r6, [r6, #0]
 80047e6:	e7f6      	b.n	80047d6 <__sfp+0x1a>
 80047e8:	220c      	movs	r2, #12
 80047ea:	5ea5      	ldrsh	r5, [r4, r2]
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	d11a      	bne.n	8004826 <__sfp+0x6a>
 80047f0:	0020      	movs	r0, r4
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <__sfp+0x8c>)
 80047f4:	3058      	adds	r0, #88	; 0x58
 80047f6:	60e3      	str	r3, [r4, #12]
 80047f8:	6665      	str	r5, [r4, #100]	; 0x64
 80047fa:	f000 f847 	bl	800488c <__retarget_lock_init_recursive>
 80047fe:	f7ff ff8d 	bl	800471c <__sfp_lock_release>
 8004802:	0020      	movs	r0, r4
 8004804:	2208      	movs	r2, #8
 8004806:	0029      	movs	r1, r5
 8004808:	6025      	str	r5, [r4, #0]
 800480a:	60a5      	str	r5, [r4, #8]
 800480c:	6065      	str	r5, [r4, #4]
 800480e:	6125      	str	r5, [r4, #16]
 8004810:	6165      	str	r5, [r4, #20]
 8004812:	61a5      	str	r5, [r4, #24]
 8004814:	305c      	adds	r0, #92	; 0x5c
 8004816:	f7ff fd81 	bl	800431c <memset>
 800481a:	6365      	str	r5, [r4, #52]	; 0x34
 800481c:	63a5      	str	r5, [r4, #56]	; 0x38
 800481e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004820:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004822:	0020      	movs	r0, r4
 8004824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004826:	3468      	adds	r4, #104	; 0x68
 8004828:	e7d7      	b.n	80047da <__sfp+0x1e>
 800482a:	2104      	movs	r1, #4
 800482c:	0038      	movs	r0, r7
 800482e:	f7ff ff57 	bl	80046e0 <__sfmoreglue>
 8004832:	1e04      	subs	r4, r0, #0
 8004834:	6030      	str	r0, [r6, #0]
 8004836:	d1d5      	bne.n	80047e4 <__sfp+0x28>
 8004838:	f7ff ff70 	bl	800471c <__sfp_lock_release>
 800483c:	230c      	movs	r3, #12
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	e7ef      	b.n	8004822 <__sfp+0x66>
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	080054c4 	.word	0x080054c4
 8004848:	ffff0001 	.word	0xffff0001

0800484c <_fwalk_reent>:
 800484c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800484e:	0004      	movs	r4, r0
 8004850:	0006      	movs	r6, r0
 8004852:	2700      	movs	r7, #0
 8004854:	9101      	str	r1, [sp, #4]
 8004856:	3448      	adds	r4, #72	; 0x48
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	68a5      	ldr	r5, [r4, #8]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	9b00      	ldr	r3, [sp, #0]
 8004860:	3b01      	subs	r3, #1
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	d504      	bpl.n	8004870 <_fwalk_reent+0x24>
 8004866:	6824      	ldr	r4, [r4, #0]
 8004868:	2c00      	cmp	r4, #0
 800486a:	d1f5      	bne.n	8004858 <_fwalk_reent+0xc>
 800486c:	0038      	movs	r0, r7
 800486e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004870:	89ab      	ldrh	r3, [r5, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d908      	bls.n	8004888 <_fwalk_reent+0x3c>
 8004876:	220e      	movs	r2, #14
 8004878:	5eab      	ldrsh	r3, [r5, r2]
 800487a:	3301      	adds	r3, #1
 800487c:	d004      	beq.n	8004888 <_fwalk_reent+0x3c>
 800487e:	0029      	movs	r1, r5
 8004880:	0030      	movs	r0, r6
 8004882:	9b01      	ldr	r3, [sp, #4]
 8004884:	4798      	blx	r3
 8004886:	4307      	orrs	r7, r0
 8004888:	3568      	adds	r5, #104	; 0x68
 800488a:	e7e8      	b.n	800485e <_fwalk_reent+0x12>

0800488c <__retarget_lock_init_recursive>:
 800488c:	4770      	bx	lr

0800488e <__retarget_lock_acquire_recursive>:
 800488e:	4770      	bx	lr

08004890 <__retarget_lock_release_recursive>:
 8004890:	4770      	bx	lr
	...

08004894 <__swhatbuf_r>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	000e      	movs	r6, r1
 8004898:	001d      	movs	r5, r3
 800489a:	230e      	movs	r3, #14
 800489c:	5ec9      	ldrsh	r1, [r1, r3]
 800489e:	0014      	movs	r4, r2
 80048a0:	b096      	sub	sp, #88	; 0x58
 80048a2:	2900      	cmp	r1, #0
 80048a4:	da07      	bge.n	80048b6 <__swhatbuf_r+0x22>
 80048a6:	2300      	movs	r3, #0
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	89b3      	ldrh	r3, [r6, #12]
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	d411      	bmi.n	80048d4 <__swhatbuf_r+0x40>
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	e00f      	b.n	80048d6 <__swhatbuf_r+0x42>
 80048b6:	466a      	mov	r2, sp
 80048b8:	f000 fd40 	bl	800533c <_fstat_r>
 80048bc:	2800      	cmp	r0, #0
 80048be:	dbf2      	blt.n	80048a6 <__swhatbuf_r+0x12>
 80048c0:	23f0      	movs	r3, #240	; 0xf0
 80048c2:	9901      	ldr	r1, [sp, #4]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	4019      	ands	r1, r3
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <__swhatbuf_r+0x4c>)
 80048ca:	18c9      	adds	r1, r1, r3
 80048cc:	424b      	negs	r3, r1
 80048ce:	4159      	adcs	r1, r3
 80048d0:	6029      	str	r1, [r5, #0]
 80048d2:	e7ed      	b.n	80048b0 <__swhatbuf_r+0x1c>
 80048d4:	2340      	movs	r3, #64	; 0x40
 80048d6:	2000      	movs	r0, #0
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	b016      	add	sp, #88	; 0x58
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	ffffe000 	.word	0xffffe000

080048e4 <__smakebuf_r>:
 80048e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048e6:	2602      	movs	r6, #2
 80048e8:	898b      	ldrh	r3, [r1, #12]
 80048ea:	0005      	movs	r5, r0
 80048ec:	000c      	movs	r4, r1
 80048ee:	4233      	tst	r3, r6
 80048f0:	d006      	beq.n	8004900 <__smakebuf_r+0x1c>
 80048f2:	0023      	movs	r3, r4
 80048f4:	3347      	adds	r3, #71	; 0x47
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	2301      	movs	r3, #1
 80048fc:	6163      	str	r3, [r4, #20]
 80048fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004900:	466a      	mov	r2, sp
 8004902:	ab01      	add	r3, sp, #4
 8004904:	f7ff ffc6 	bl	8004894 <__swhatbuf_r>
 8004908:	9900      	ldr	r1, [sp, #0]
 800490a:	0007      	movs	r7, r0
 800490c:	0028      	movs	r0, r5
 800490e:	f000 f881 	bl	8004a14 <_malloc_r>
 8004912:	2800      	cmp	r0, #0
 8004914:	d108      	bne.n	8004928 <__smakebuf_r+0x44>
 8004916:	220c      	movs	r2, #12
 8004918:	5ea3      	ldrsh	r3, [r4, r2]
 800491a:	059a      	lsls	r2, r3, #22
 800491c:	d4ef      	bmi.n	80048fe <__smakebuf_r+0x1a>
 800491e:	2203      	movs	r2, #3
 8004920:	4393      	bics	r3, r2
 8004922:	431e      	orrs	r6, r3
 8004924:	81a6      	strh	r6, [r4, #12]
 8004926:	e7e4      	b.n	80048f2 <__smakebuf_r+0xe>
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <__smakebuf_r+0x84>)
 800492a:	62ab      	str	r3, [r5, #40]	; 0x28
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	89a2      	ldrh	r2, [r4, #12]
 8004930:	6020      	str	r0, [r4, #0]
 8004932:	4313      	orrs	r3, r2
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	9b00      	ldr	r3, [sp, #0]
 8004938:	6120      	str	r0, [r4, #16]
 800493a:	6163      	str	r3, [r4, #20]
 800493c:	9b01      	ldr	r3, [sp, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <__smakebuf_r+0x7a>
 8004942:	0028      	movs	r0, r5
 8004944:	230e      	movs	r3, #14
 8004946:	5ee1      	ldrsh	r1, [r4, r3]
 8004948:	f000 fd0a 	bl	8005360 <_isatty_r>
 800494c:	2800      	cmp	r0, #0
 800494e:	d006      	beq.n	800495e <__smakebuf_r+0x7a>
 8004950:	2203      	movs	r2, #3
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	4393      	bics	r3, r2
 8004956:	001a      	movs	r2, r3
 8004958:	2301      	movs	r3, #1
 800495a:	4313      	orrs	r3, r2
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	89a0      	ldrh	r0, [r4, #12]
 8004960:	4307      	orrs	r7, r0
 8004962:	81a7      	strh	r7, [r4, #12]
 8004964:	e7cb      	b.n	80048fe <__smakebuf_r+0x1a>
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	080046d1 	.word	0x080046d1

0800496c <malloc>:
 800496c:	b510      	push	{r4, lr}
 800496e:	4b03      	ldr	r3, [pc, #12]	; (800497c <malloc+0x10>)
 8004970:	0001      	movs	r1, r0
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	f000 f84e 	bl	8004a14 <_malloc_r>
 8004978:	bd10      	pop	{r4, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	2000000c 	.word	0x2000000c

08004980 <_free_r>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	0005      	movs	r5, r0
 8004984:	2900      	cmp	r1, #0
 8004986:	d010      	beq.n	80049aa <_free_r+0x2a>
 8004988:	1f0c      	subs	r4, r1, #4
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	da00      	bge.n	8004992 <_free_r+0x12>
 8004990:	18e4      	adds	r4, r4, r3
 8004992:	0028      	movs	r0, r5
 8004994:	f000 fd16 	bl	80053c4 <__malloc_lock>
 8004998:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <_free_r+0x90>)
 800499a:	6813      	ldr	r3, [r2, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <_free_r+0x2c>
 80049a0:	6063      	str	r3, [r4, #4]
 80049a2:	6014      	str	r4, [r2, #0]
 80049a4:	0028      	movs	r0, r5
 80049a6:	f000 fd15 	bl	80053d4 <__malloc_unlock>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d908      	bls.n	80049c2 <_free_r+0x42>
 80049b0:	6821      	ldr	r1, [r4, #0]
 80049b2:	1860      	adds	r0, r4, r1
 80049b4:	4283      	cmp	r3, r0
 80049b6:	d1f3      	bne.n	80049a0 <_free_r+0x20>
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	1841      	adds	r1, r0, r1
 80049be:	6021      	str	r1, [r4, #0]
 80049c0:	e7ee      	b.n	80049a0 <_free_r+0x20>
 80049c2:	001a      	movs	r2, r3
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <_free_r+0x4e>
 80049ca:	42a3      	cmp	r3, r4
 80049cc:	d9f9      	bls.n	80049c2 <_free_r+0x42>
 80049ce:	6811      	ldr	r1, [r2, #0]
 80049d0:	1850      	adds	r0, r2, r1
 80049d2:	42a0      	cmp	r0, r4
 80049d4:	d10b      	bne.n	80049ee <_free_r+0x6e>
 80049d6:	6820      	ldr	r0, [r4, #0]
 80049d8:	1809      	adds	r1, r1, r0
 80049da:	1850      	adds	r0, r2, r1
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	4283      	cmp	r3, r0
 80049e0:	d1e0      	bne.n	80049a4 <_free_r+0x24>
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	1841      	adds	r1, r0, r1
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	6053      	str	r3, [r2, #4]
 80049ec:	e7da      	b.n	80049a4 <_free_r+0x24>
 80049ee:	42a0      	cmp	r0, r4
 80049f0:	d902      	bls.n	80049f8 <_free_r+0x78>
 80049f2:	230c      	movs	r3, #12
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	e7d5      	b.n	80049a4 <_free_r+0x24>
 80049f8:	6821      	ldr	r1, [r4, #0]
 80049fa:	1860      	adds	r0, r4, r1
 80049fc:	4283      	cmp	r3, r0
 80049fe:	d103      	bne.n	8004a08 <_free_r+0x88>
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	1841      	adds	r1, r0, r1
 8004a06:	6021      	str	r1, [r4, #0]
 8004a08:	6063      	str	r3, [r4, #4]
 8004a0a:	6054      	str	r4, [r2, #4]
 8004a0c:	e7ca      	b.n	80049a4 <_free_r+0x24>
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20000090 	.word	0x20000090

08004a14 <_malloc_r>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	2303      	movs	r3, #3
 8004a18:	1ccd      	adds	r5, r1, #3
 8004a1a:	439d      	bics	r5, r3
 8004a1c:	3508      	adds	r5, #8
 8004a1e:	0006      	movs	r6, r0
 8004a20:	2d0c      	cmp	r5, #12
 8004a22:	d21f      	bcs.n	8004a64 <_malloc_r+0x50>
 8004a24:	250c      	movs	r5, #12
 8004a26:	42a9      	cmp	r1, r5
 8004a28:	d81e      	bhi.n	8004a68 <_malloc_r+0x54>
 8004a2a:	0030      	movs	r0, r6
 8004a2c:	f000 fcca 	bl	80053c4 <__malloc_lock>
 8004a30:	4925      	ldr	r1, [pc, #148]	; (8004ac8 <_malloc_r+0xb4>)
 8004a32:	680a      	ldr	r2, [r1, #0]
 8004a34:	0014      	movs	r4, r2
 8004a36:	2c00      	cmp	r4, #0
 8004a38:	d11a      	bne.n	8004a70 <_malloc_r+0x5c>
 8004a3a:	4f24      	ldr	r7, [pc, #144]	; (8004acc <_malloc_r+0xb8>)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <_malloc_r+0x38>
 8004a42:	0021      	movs	r1, r4
 8004a44:	0030      	movs	r0, r6
 8004a46:	f000 fb27 	bl	8005098 <_sbrk_r>
 8004a4a:	6038      	str	r0, [r7, #0]
 8004a4c:	0029      	movs	r1, r5
 8004a4e:	0030      	movs	r0, r6
 8004a50:	f000 fb22 	bl	8005098 <_sbrk_r>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d12b      	bne.n	8004ab0 <_malloc_r+0x9c>
 8004a58:	230c      	movs	r3, #12
 8004a5a:	0030      	movs	r0, r6
 8004a5c:	6033      	str	r3, [r6, #0]
 8004a5e:	f000 fcb9 	bl	80053d4 <__malloc_unlock>
 8004a62:	e003      	b.n	8004a6c <_malloc_r+0x58>
 8004a64:	2d00      	cmp	r5, #0
 8004a66:	dade      	bge.n	8004a26 <_malloc_r+0x12>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	6033      	str	r3, [r6, #0]
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	1b5b      	subs	r3, r3, r5
 8004a74:	d419      	bmi.n	8004aaa <_malloc_r+0x96>
 8004a76:	2b0b      	cmp	r3, #11
 8004a78:	d903      	bls.n	8004a82 <_malloc_r+0x6e>
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	18e4      	adds	r4, r4, r3
 8004a7e:	6025      	str	r5, [r4, #0]
 8004a80:	e003      	b.n	8004a8a <_malloc_r+0x76>
 8004a82:	6863      	ldr	r3, [r4, #4]
 8004a84:	42a2      	cmp	r2, r4
 8004a86:	d10e      	bne.n	8004aa6 <_malloc_r+0x92>
 8004a88:	600b      	str	r3, [r1, #0]
 8004a8a:	0030      	movs	r0, r6
 8004a8c:	f000 fca2 	bl	80053d4 <__malloc_unlock>
 8004a90:	0020      	movs	r0, r4
 8004a92:	2207      	movs	r2, #7
 8004a94:	300b      	adds	r0, #11
 8004a96:	1d23      	adds	r3, r4, #4
 8004a98:	4390      	bics	r0, r2
 8004a9a:	1ac2      	subs	r2, r0, r3
 8004a9c:	4298      	cmp	r0, r3
 8004a9e:	d0e6      	beq.n	8004a6e <_malloc_r+0x5a>
 8004aa0:	1a1b      	subs	r3, r3, r0
 8004aa2:	50a3      	str	r3, [r4, r2]
 8004aa4:	e7e3      	b.n	8004a6e <_malloc_r+0x5a>
 8004aa6:	6053      	str	r3, [r2, #4]
 8004aa8:	e7ef      	b.n	8004a8a <_malloc_r+0x76>
 8004aaa:	0022      	movs	r2, r4
 8004aac:	6864      	ldr	r4, [r4, #4]
 8004aae:	e7c2      	b.n	8004a36 <_malloc_r+0x22>
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	1cc4      	adds	r4, r0, #3
 8004ab4:	439c      	bics	r4, r3
 8004ab6:	42a0      	cmp	r0, r4
 8004ab8:	d0e1      	beq.n	8004a7e <_malloc_r+0x6a>
 8004aba:	1a21      	subs	r1, r4, r0
 8004abc:	0030      	movs	r0, r6
 8004abe:	f000 faeb 	bl	8005098 <_sbrk_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d1db      	bne.n	8004a7e <_malloc_r+0x6a>
 8004ac6:	e7c7      	b.n	8004a58 <_malloc_r+0x44>
 8004ac8:	20000090 	.word	0x20000090
 8004acc:	20000094 	.word	0x20000094

08004ad0 <__sfputc_r>:
 8004ad0:	6893      	ldr	r3, [r2, #8]
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	6093      	str	r3, [r2, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da04      	bge.n	8004ae6 <__sfputc_r+0x16>
 8004adc:	6994      	ldr	r4, [r2, #24]
 8004ade:	42a3      	cmp	r3, r4
 8004ae0:	db07      	blt.n	8004af2 <__sfputc_r+0x22>
 8004ae2:	290a      	cmp	r1, #10
 8004ae4:	d005      	beq.n	8004af2 <__sfputc_r+0x22>
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	1c58      	adds	r0, r3, #1
 8004aea:	6010      	str	r0, [r2, #0]
 8004aec:	7019      	strb	r1, [r3, #0]
 8004aee:	0008      	movs	r0, r1
 8004af0:	bd10      	pop	{r4, pc}
 8004af2:	f000 fb2f 	bl	8005154 <__swbuf_r>
 8004af6:	0001      	movs	r1, r0
 8004af8:	e7f9      	b.n	8004aee <__sfputc_r+0x1e>

08004afa <__sfputs_r>:
 8004afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afc:	0006      	movs	r6, r0
 8004afe:	000f      	movs	r7, r1
 8004b00:	0014      	movs	r4, r2
 8004b02:	18d5      	adds	r5, r2, r3
 8004b04:	42ac      	cmp	r4, r5
 8004b06:	d101      	bne.n	8004b0c <__sfputs_r+0x12>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e007      	b.n	8004b1c <__sfputs_r+0x22>
 8004b0c:	7821      	ldrb	r1, [r4, #0]
 8004b0e:	003a      	movs	r2, r7
 8004b10:	0030      	movs	r0, r6
 8004b12:	f7ff ffdd 	bl	8004ad0 <__sfputc_r>
 8004b16:	3401      	adds	r4, #1
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d1f3      	bne.n	8004b04 <__sfputs_r+0xa>
 8004b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b20 <_vfiprintf_r>:
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b22:	b0a1      	sub	sp, #132	; 0x84
 8004b24:	0006      	movs	r6, r0
 8004b26:	000c      	movs	r4, r1
 8004b28:	001f      	movs	r7, r3
 8004b2a:	9203      	str	r2, [sp, #12]
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d004      	beq.n	8004b3a <_vfiprintf_r+0x1a>
 8004b30:	6983      	ldr	r3, [r0, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <_vfiprintf_r+0x1a>
 8004b36:	f7ff fe09 	bl	800474c <__sinit>
 8004b3a:	4b8e      	ldr	r3, [pc, #568]	; (8004d74 <_vfiprintf_r+0x254>)
 8004b3c:	429c      	cmp	r4, r3
 8004b3e:	d11c      	bne.n	8004b7a <_vfiprintf_r+0x5a>
 8004b40:	6874      	ldr	r4, [r6, #4]
 8004b42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b44:	07db      	lsls	r3, r3, #31
 8004b46:	d405      	bmi.n	8004b54 <_vfiprintf_r+0x34>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	059b      	lsls	r3, r3, #22
 8004b4c:	d402      	bmi.n	8004b54 <_vfiprintf_r+0x34>
 8004b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b50:	f7ff fe9d 	bl	800488e <__retarget_lock_acquire_recursive>
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	071b      	lsls	r3, r3, #28
 8004b58:	d502      	bpl.n	8004b60 <_vfiprintf_r+0x40>
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11d      	bne.n	8004b9c <_vfiprintf_r+0x7c>
 8004b60:	0021      	movs	r1, r4
 8004b62:	0030      	movs	r0, r6
 8004b64:	f000 fb60 	bl	8005228 <__swsetup_r>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d017      	beq.n	8004b9c <_vfiprintf_r+0x7c>
 8004b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b6e:	07db      	lsls	r3, r3, #31
 8004b70:	d50d      	bpl.n	8004b8e <_vfiprintf_r+0x6e>
 8004b72:	2001      	movs	r0, #1
 8004b74:	4240      	negs	r0, r0
 8004b76:	b021      	add	sp, #132	; 0x84
 8004b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7a:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <_vfiprintf_r+0x258>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	d101      	bne.n	8004b84 <_vfiprintf_r+0x64>
 8004b80:	68b4      	ldr	r4, [r6, #8]
 8004b82:	e7de      	b.n	8004b42 <_vfiprintf_r+0x22>
 8004b84:	4b7d      	ldr	r3, [pc, #500]	; (8004d7c <_vfiprintf_r+0x25c>)
 8004b86:	429c      	cmp	r4, r3
 8004b88:	d1db      	bne.n	8004b42 <_vfiprintf_r+0x22>
 8004b8a:	68f4      	ldr	r4, [r6, #12]
 8004b8c:	e7d9      	b.n	8004b42 <_vfiprintf_r+0x22>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	059b      	lsls	r3, r3, #22
 8004b92:	d4ee      	bmi.n	8004b72 <_vfiprintf_r+0x52>
 8004b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b96:	f7ff fe7b 	bl	8004890 <__retarget_lock_release_recursive>
 8004b9a:	e7ea      	b.n	8004b72 <_vfiprintf_r+0x52>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	ad08      	add	r5, sp, #32
 8004ba0:	616b      	str	r3, [r5, #20]
 8004ba2:	3320      	adds	r3, #32
 8004ba4:	766b      	strb	r3, [r5, #25]
 8004ba6:	3310      	adds	r3, #16
 8004ba8:	76ab      	strb	r3, [r5, #26]
 8004baa:	9707      	str	r7, [sp, #28]
 8004bac:	9f03      	ldr	r7, [sp, #12]
 8004bae:	783b      	ldrb	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <_vfiprintf_r+0x98>
 8004bb4:	2b25      	cmp	r3, #37	; 0x25
 8004bb6:	d14e      	bne.n	8004c56 <_vfiprintf_r+0x136>
 8004bb8:	9b03      	ldr	r3, [sp, #12]
 8004bba:	1afb      	subs	r3, r7, r3
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	429f      	cmp	r7, r3
 8004bc2:	d00d      	beq.n	8004be0 <_vfiprintf_r+0xc0>
 8004bc4:	9b05      	ldr	r3, [sp, #20]
 8004bc6:	0021      	movs	r1, r4
 8004bc8:	0030      	movs	r0, r6
 8004bca:	9a03      	ldr	r2, [sp, #12]
 8004bcc:	f7ff ff95 	bl	8004afa <__sfputs_r>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d100      	bne.n	8004bd6 <_vfiprintf_r+0xb6>
 8004bd4:	e0b5      	b.n	8004d42 <_vfiprintf_r+0x222>
 8004bd6:	696a      	ldr	r2, [r5, #20]
 8004bd8:	9b05      	ldr	r3, [sp, #20]
 8004bda:	4694      	mov	ip, r2
 8004bdc:	4463      	add	r3, ip
 8004bde:	616b      	str	r3, [r5, #20]
 8004be0:	783b      	ldrb	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d100      	bne.n	8004be8 <_vfiprintf_r+0xc8>
 8004be6:	e0ac      	b.n	8004d42 <_vfiprintf_r+0x222>
 8004be8:	2201      	movs	r2, #1
 8004bea:	1c7b      	adds	r3, r7, #1
 8004bec:	9303      	str	r3, [sp, #12]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4252      	negs	r2, r2
 8004bf2:	606a      	str	r2, [r5, #4]
 8004bf4:	a904      	add	r1, sp, #16
 8004bf6:	3254      	adds	r2, #84	; 0x54
 8004bf8:	1852      	adds	r2, r2, r1
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	60eb      	str	r3, [r5, #12]
 8004bfe:	60ab      	str	r3, [r5, #8]
 8004c00:	7013      	strb	r3, [r2, #0]
 8004c02:	65ab      	str	r3, [r5, #88]	; 0x58
 8004c04:	9b03      	ldr	r3, [sp, #12]
 8004c06:	2205      	movs	r2, #5
 8004c08:	7819      	ldrb	r1, [r3, #0]
 8004c0a:	485d      	ldr	r0, [pc, #372]	; (8004d80 <_vfiprintf_r+0x260>)
 8004c0c:	f000 fbce 	bl	80053ac <memchr>
 8004c10:	9b03      	ldr	r3, [sp, #12]
 8004c12:	1c5f      	adds	r7, r3, #1
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d120      	bne.n	8004c5a <_vfiprintf_r+0x13a>
 8004c18:	682a      	ldr	r2, [r5, #0]
 8004c1a:	06d3      	lsls	r3, r2, #27
 8004c1c:	d504      	bpl.n	8004c28 <_vfiprintf_r+0x108>
 8004c1e:	2353      	movs	r3, #83	; 0x53
 8004c20:	a904      	add	r1, sp, #16
 8004c22:	185b      	adds	r3, r3, r1
 8004c24:	2120      	movs	r1, #32
 8004c26:	7019      	strb	r1, [r3, #0]
 8004c28:	0713      	lsls	r3, r2, #28
 8004c2a:	d504      	bpl.n	8004c36 <_vfiprintf_r+0x116>
 8004c2c:	2353      	movs	r3, #83	; 0x53
 8004c2e:	a904      	add	r1, sp, #16
 8004c30:	185b      	adds	r3, r3, r1
 8004c32:	212b      	movs	r1, #43	; 0x2b
 8004c34:	7019      	strb	r1, [r3, #0]
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3c:	d016      	beq.n	8004c6c <_vfiprintf_r+0x14c>
 8004c3e:	2100      	movs	r1, #0
 8004c40:	68eb      	ldr	r3, [r5, #12]
 8004c42:	9f03      	ldr	r7, [sp, #12]
 8004c44:	783a      	ldrb	r2, [r7, #0]
 8004c46:	1c78      	adds	r0, r7, #1
 8004c48:	3a30      	subs	r2, #48	; 0x30
 8004c4a:	4684      	mov	ip, r0
 8004c4c:	2a09      	cmp	r2, #9
 8004c4e:	d94f      	bls.n	8004cf0 <_vfiprintf_r+0x1d0>
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d111      	bne.n	8004c78 <_vfiprintf_r+0x158>
 8004c54:	e017      	b.n	8004c86 <_vfiprintf_r+0x166>
 8004c56:	3701      	adds	r7, #1
 8004c58:	e7a9      	b.n	8004bae <_vfiprintf_r+0x8e>
 8004c5a:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <_vfiprintf_r+0x260>)
 8004c5c:	682a      	ldr	r2, [r5, #0]
 8004c5e:	1ac0      	subs	r0, r0, r3
 8004c60:	2301      	movs	r3, #1
 8004c62:	4083      	lsls	r3, r0
 8004c64:	4313      	orrs	r3, r2
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	9703      	str	r7, [sp, #12]
 8004c6a:	e7cb      	b.n	8004c04 <_vfiprintf_r+0xe4>
 8004c6c:	9b07      	ldr	r3, [sp, #28]
 8004c6e:	1d19      	adds	r1, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	9107      	str	r1, [sp, #28]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	db01      	blt.n	8004c7c <_vfiprintf_r+0x15c>
 8004c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c7a:	e004      	b.n	8004c86 <_vfiprintf_r+0x166>
 8004c7c:	425b      	negs	r3, r3
 8004c7e:	60eb      	str	r3, [r5, #12]
 8004c80:	2302      	movs	r3, #2
 8004c82:	4313      	orrs	r3, r2
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	783b      	ldrb	r3, [r7, #0]
 8004c88:	2b2e      	cmp	r3, #46	; 0x2e
 8004c8a:	d10a      	bne.n	8004ca2 <_vfiprintf_r+0x182>
 8004c8c:	787b      	ldrb	r3, [r7, #1]
 8004c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c90:	d137      	bne.n	8004d02 <_vfiprintf_r+0x1e2>
 8004c92:	9b07      	ldr	r3, [sp, #28]
 8004c94:	3702      	adds	r7, #2
 8004c96:	1d1a      	adds	r2, r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	9207      	str	r2, [sp, #28]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	db2d      	blt.n	8004cfc <_vfiprintf_r+0x1dc>
 8004ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	7839      	ldrb	r1, [r7, #0]
 8004ca6:	4837      	ldr	r0, [pc, #220]	; (8004d84 <_vfiprintf_r+0x264>)
 8004ca8:	f000 fb80 	bl	80053ac <memchr>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d007      	beq.n	8004cc0 <_vfiprintf_r+0x1a0>
 8004cb0:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <_vfiprintf_r+0x264>)
 8004cb2:	682a      	ldr	r2, [r5, #0]
 8004cb4:	1ac0      	subs	r0, r0, r3
 8004cb6:	2340      	movs	r3, #64	; 0x40
 8004cb8:	4083      	lsls	r3, r0
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	3701      	adds	r7, #1
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	7839      	ldrb	r1, [r7, #0]
 8004cc2:	1c7b      	adds	r3, r7, #1
 8004cc4:	2206      	movs	r2, #6
 8004cc6:	4830      	ldr	r0, [pc, #192]	; (8004d88 <_vfiprintf_r+0x268>)
 8004cc8:	9303      	str	r3, [sp, #12]
 8004cca:	7629      	strb	r1, [r5, #24]
 8004ccc:	f000 fb6e 	bl	80053ac <memchr>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d045      	beq.n	8004d60 <_vfiprintf_r+0x240>
 8004cd4:	4b2d      	ldr	r3, [pc, #180]	; (8004d8c <_vfiprintf_r+0x26c>)
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d127      	bne.n	8004d2a <_vfiprintf_r+0x20a>
 8004cda:	2207      	movs	r2, #7
 8004cdc:	9b07      	ldr	r3, [sp, #28]
 8004cde:	3307      	adds	r3, #7
 8004ce0:	4393      	bics	r3, r2
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	9307      	str	r3, [sp, #28]
 8004ce6:	696b      	ldr	r3, [r5, #20]
 8004ce8:	9a04      	ldr	r2, [sp, #16]
 8004cea:	189b      	adds	r3, r3, r2
 8004cec:	616b      	str	r3, [r5, #20]
 8004cee:	e75d      	b.n	8004bac <_vfiprintf_r+0x8c>
 8004cf0:	210a      	movs	r1, #10
 8004cf2:	434b      	muls	r3, r1
 8004cf4:	4667      	mov	r7, ip
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	3909      	subs	r1, #9
 8004cfa:	e7a3      	b.n	8004c44 <_vfiprintf_r+0x124>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	425b      	negs	r3, r3
 8004d00:	e7ce      	b.n	8004ca0 <_vfiprintf_r+0x180>
 8004d02:	2300      	movs	r3, #0
 8004d04:	001a      	movs	r2, r3
 8004d06:	3701      	adds	r7, #1
 8004d08:	606b      	str	r3, [r5, #4]
 8004d0a:	7839      	ldrb	r1, [r7, #0]
 8004d0c:	1c78      	adds	r0, r7, #1
 8004d0e:	3930      	subs	r1, #48	; 0x30
 8004d10:	4684      	mov	ip, r0
 8004d12:	2909      	cmp	r1, #9
 8004d14:	d903      	bls.n	8004d1e <_vfiprintf_r+0x1fe>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0c3      	beq.n	8004ca2 <_vfiprintf_r+0x182>
 8004d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d1c:	e7c1      	b.n	8004ca2 <_vfiprintf_r+0x182>
 8004d1e:	230a      	movs	r3, #10
 8004d20:	435a      	muls	r2, r3
 8004d22:	4667      	mov	r7, ip
 8004d24:	1852      	adds	r2, r2, r1
 8004d26:	3b09      	subs	r3, #9
 8004d28:	e7ef      	b.n	8004d0a <_vfiprintf_r+0x1ea>
 8004d2a:	ab07      	add	r3, sp, #28
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	0022      	movs	r2, r4
 8004d30:	0029      	movs	r1, r5
 8004d32:	0030      	movs	r0, r6
 8004d34:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <_vfiprintf_r+0x270>)
 8004d36:	e000      	b.n	8004d3a <_vfiprintf_r+0x21a>
 8004d38:	bf00      	nop
 8004d3a:	9004      	str	r0, [sp, #16]
 8004d3c:	9b04      	ldr	r3, [sp, #16]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	d1d1      	bne.n	8004ce6 <_vfiprintf_r+0x1c6>
 8004d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d44:	07db      	lsls	r3, r3, #31
 8004d46:	d405      	bmi.n	8004d54 <_vfiprintf_r+0x234>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	059b      	lsls	r3, r3, #22
 8004d4c:	d402      	bmi.n	8004d54 <_vfiprintf_r+0x234>
 8004d4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d50:	f7ff fd9e 	bl	8004890 <__retarget_lock_release_recursive>
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	065b      	lsls	r3, r3, #25
 8004d58:	d500      	bpl.n	8004d5c <_vfiprintf_r+0x23c>
 8004d5a:	e70a      	b.n	8004b72 <_vfiprintf_r+0x52>
 8004d5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d5e:	e70a      	b.n	8004b76 <_vfiprintf_r+0x56>
 8004d60:	ab07      	add	r3, sp, #28
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	0022      	movs	r2, r4
 8004d66:	0029      	movs	r1, r5
 8004d68:	0030      	movs	r0, r6
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <_vfiprintf_r+0x270>)
 8004d6c:	f000 f882 	bl	8004e74 <_printf_i>
 8004d70:	e7e3      	b.n	8004d3a <_vfiprintf_r+0x21a>
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	080054e8 	.word	0x080054e8
 8004d78:	08005508 	.word	0x08005508
 8004d7c:	080054c8 	.word	0x080054c8
 8004d80:	08005528 	.word	0x08005528
 8004d84:	0800552e 	.word	0x0800552e
 8004d88:	08005532 	.word	0x08005532
 8004d8c:	00000000 	.word	0x00000000
 8004d90:	08004afb 	.word	0x08004afb

08004d94 <_printf_common>:
 8004d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d96:	0015      	movs	r5, r2
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	688a      	ldr	r2, [r1, #8]
 8004d9c:	690b      	ldr	r3, [r1, #16]
 8004d9e:	000c      	movs	r4, r1
 8004da0:	9000      	str	r0, [sp, #0]
 8004da2:	4293      	cmp	r3, r2
 8004da4:	da00      	bge.n	8004da8 <_printf_common+0x14>
 8004da6:	0013      	movs	r3, r2
 8004da8:	0022      	movs	r2, r4
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	3243      	adds	r2, #67	; 0x43
 8004dae:	7812      	ldrb	r2, [r2, #0]
 8004db0:	2a00      	cmp	r2, #0
 8004db2:	d001      	beq.n	8004db8 <_printf_common+0x24>
 8004db4:	3301      	adds	r3, #1
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	069b      	lsls	r3, r3, #26
 8004dbc:	d502      	bpl.n	8004dc4 <_printf_common+0x30>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	602b      	str	r3, [r5, #0]
 8004dc4:	6822      	ldr	r2, [r4, #0]
 8004dc6:	2306      	movs	r3, #6
 8004dc8:	0017      	movs	r7, r2
 8004dca:	401f      	ands	r7, r3
 8004dcc:	421a      	tst	r2, r3
 8004dce:	d027      	beq.n	8004e20 <_printf_common+0x8c>
 8004dd0:	0023      	movs	r3, r4
 8004dd2:	3343      	adds	r3, #67	; 0x43
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	1e5a      	subs	r2, r3, #1
 8004dd8:	4193      	sbcs	r3, r2
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	0692      	lsls	r2, r2, #26
 8004dde:	d430      	bmi.n	8004e42 <_printf_common+0xae>
 8004de0:	0022      	movs	r2, r4
 8004de2:	9901      	ldr	r1, [sp, #4]
 8004de4:	9800      	ldr	r0, [sp, #0]
 8004de6:	9e08      	ldr	r6, [sp, #32]
 8004de8:	3243      	adds	r2, #67	; 0x43
 8004dea:	47b0      	blx	r6
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d025      	beq.n	8004e3c <_printf_common+0xa8>
 8004df0:	2306      	movs	r3, #6
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	682a      	ldr	r2, [r5, #0]
 8004df6:	68e1      	ldr	r1, [r4, #12]
 8004df8:	2500      	movs	r5, #0
 8004dfa:	4003      	ands	r3, r0
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d103      	bne.n	8004e08 <_printf_common+0x74>
 8004e00:	1a8d      	subs	r5, r1, r2
 8004e02:	43eb      	mvns	r3, r5
 8004e04:	17db      	asrs	r3, r3, #31
 8004e06:	401d      	ands	r5, r3
 8004e08:	68a3      	ldr	r3, [r4, #8]
 8004e0a:	6922      	ldr	r2, [r4, #16]
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	dd01      	ble.n	8004e14 <_printf_common+0x80>
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	18ed      	adds	r5, r5, r3
 8004e14:	2700      	movs	r7, #0
 8004e16:	42bd      	cmp	r5, r7
 8004e18:	d120      	bne.n	8004e5c <_printf_common+0xc8>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e010      	b.n	8004e40 <_printf_common+0xac>
 8004e1e:	3701      	adds	r7, #1
 8004e20:	68e3      	ldr	r3, [r4, #12]
 8004e22:	682a      	ldr	r2, [r5, #0]
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	42bb      	cmp	r3, r7
 8004e28:	ddd2      	ble.n	8004dd0 <_printf_common+0x3c>
 8004e2a:	0022      	movs	r2, r4
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	9901      	ldr	r1, [sp, #4]
 8004e30:	9800      	ldr	r0, [sp, #0]
 8004e32:	9e08      	ldr	r6, [sp, #32]
 8004e34:	3219      	adds	r2, #25
 8004e36:	47b0      	blx	r6
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d1f0      	bne.n	8004e1e <_printf_common+0x8a>
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	4240      	negs	r0, r0
 8004e40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e42:	2030      	movs	r0, #48	; 0x30
 8004e44:	18e1      	adds	r1, r4, r3
 8004e46:	3143      	adds	r1, #67	; 0x43
 8004e48:	7008      	strb	r0, [r1, #0]
 8004e4a:	0021      	movs	r1, r4
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	3145      	adds	r1, #69	; 0x45
 8004e50:	7809      	ldrb	r1, [r1, #0]
 8004e52:	18a2      	adds	r2, r4, r2
 8004e54:	3243      	adds	r2, #67	; 0x43
 8004e56:	3302      	adds	r3, #2
 8004e58:	7011      	strb	r1, [r2, #0]
 8004e5a:	e7c1      	b.n	8004de0 <_printf_common+0x4c>
 8004e5c:	0022      	movs	r2, r4
 8004e5e:	2301      	movs	r3, #1
 8004e60:	9901      	ldr	r1, [sp, #4]
 8004e62:	9800      	ldr	r0, [sp, #0]
 8004e64:	9e08      	ldr	r6, [sp, #32]
 8004e66:	321a      	adds	r2, #26
 8004e68:	47b0      	blx	r6
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	d0e6      	beq.n	8004e3c <_printf_common+0xa8>
 8004e6e:	3701      	adds	r7, #1
 8004e70:	e7d1      	b.n	8004e16 <_printf_common+0x82>
	...

08004e74 <_printf_i>:
 8004e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e76:	b08b      	sub	sp, #44	; 0x2c
 8004e78:	9206      	str	r2, [sp, #24]
 8004e7a:	000a      	movs	r2, r1
 8004e7c:	3243      	adds	r2, #67	; 0x43
 8004e7e:	9307      	str	r3, [sp, #28]
 8004e80:	9005      	str	r0, [sp, #20]
 8004e82:	9204      	str	r2, [sp, #16]
 8004e84:	7e0a      	ldrb	r2, [r1, #24]
 8004e86:	000c      	movs	r4, r1
 8004e88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e8a:	2a78      	cmp	r2, #120	; 0x78
 8004e8c:	d806      	bhi.n	8004e9c <_printf_i+0x28>
 8004e8e:	2a62      	cmp	r2, #98	; 0x62
 8004e90:	d808      	bhi.n	8004ea4 <_printf_i+0x30>
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	d100      	bne.n	8004e98 <_printf_i+0x24>
 8004e96:	e0c0      	b.n	800501a <_printf_i+0x1a6>
 8004e98:	2a58      	cmp	r2, #88	; 0x58
 8004e9a:	d052      	beq.n	8004f42 <_printf_i+0xce>
 8004e9c:	0026      	movs	r6, r4
 8004e9e:	3642      	adds	r6, #66	; 0x42
 8004ea0:	7032      	strb	r2, [r6, #0]
 8004ea2:	e022      	b.n	8004eea <_printf_i+0x76>
 8004ea4:	0010      	movs	r0, r2
 8004ea6:	3863      	subs	r0, #99	; 0x63
 8004ea8:	2815      	cmp	r0, #21
 8004eaa:	d8f7      	bhi.n	8004e9c <_printf_i+0x28>
 8004eac:	f7fb f92c 	bl	8000108 <__gnu_thumb1_case_shi>
 8004eb0:	001f0016 	.word	0x001f0016
 8004eb4:	fff6fff6 	.word	0xfff6fff6
 8004eb8:	fff6fff6 	.word	0xfff6fff6
 8004ebc:	fff6001f 	.word	0xfff6001f
 8004ec0:	fff6fff6 	.word	0xfff6fff6
 8004ec4:	00a8fff6 	.word	0x00a8fff6
 8004ec8:	009a0036 	.word	0x009a0036
 8004ecc:	fff6fff6 	.word	0xfff6fff6
 8004ed0:	fff600b9 	.word	0xfff600b9
 8004ed4:	fff60036 	.word	0xfff60036
 8004ed8:	009efff6 	.word	0x009efff6
 8004edc:	0026      	movs	r6, r4
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	3642      	adds	r6, #66	; 0x42
 8004ee2:	1d11      	adds	r1, r2, #4
 8004ee4:	6019      	str	r1, [r3, #0]
 8004ee6:	6813      	ldr	r3, [r2, #0]
 8004ee8:	7033      	strb	r3, [r6, #0]
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0a7      	b.n	800503e <_printf_i+0x1ca>
 8004eee:	6808      	ldr	r0, [r1, #0]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	1d0a      	adds	r2, r1, #4
 8004ef4:	0605      	lsls	r5, r0, #24
 8004ef6:	d50b      	bpl.n	8004f10 <_printf_i+0x9c>
 8004ef8:	680d      	ldr	r5, [r1, #0]
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	da03      	bge.n	8004f08 <_printf_i+0x94>
 8004f00:	232d      	movs	r3, #45	; 0x2d
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	426d      	negs	r5, r5
 8004f06:	7013      	strb	r3, [r2, #0]
 8004f08:	4b61      	ldr	r3, [pc, #388]	; (8005090 <_printf_i+0x21c>)
 8004f0a:	270a      	movs	r7, #10
 8004f0c:	9303      	str	r3, [sp, #12]
 8004f0e:	e032      	b.n	8004f76 <_printf_i+0x102>
 8004f10:	680d      	ldr	r5, [r1, #0]
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	0641      	lsls	r1, r0, #25
 8004f16:	d5f1      	bpl.n	8004efc <_printf_i+0x88>
 8004f18:	b22d      	sxth	r5, r5
 8004f1a:	e7ef      	b.n	8004efc <_printf_i+0x88>
 8004f1c:	680d      	ldr	r5, [r1, #0]
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	1d08      	adds	r0, r1, #4
 8004f22:	6018      	str	r0, [r3, #0]
 8004f24:	062e      	lsls	r6, r5, #24
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0xb8>
 8004f28:	680d      	ldr	r5, [r1, #0]
 8004f2a:	e003      	b.n	8004f34 <_printf_i+0xc0>
 8004f2c:	066d      	lsls	r5, r5, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0xb4>
 8004f30:	680d      	ldr	r5, [r1, #0]
 8004f32:	b2ad      	uxth	r5, r5
 8004f34:	4b56      	ldr	r3, [pc, #344]	; (8005090 <_printf_i+0x21c>)
 8004f36:	270a      	movs	r7, #10
 8004f38:	9303      	str	r3, [sp, #12]
 8004f3a:	2a6f      	cmp	r2, #111	; 0x6f
 8004f3c:	d117      	bne.n	8004f6e <_printf_i+0xfa>
 8004f3e:	2708      	movs	r7, #8
 8004f40:	e015      	b.n	8004f6e <_printf_i+0xfa>
 8004f42:	3145      	adds	r1, #69	; 0x45
 8004f44:	700a      	strb	r2, [r1, #0]
 8004f46:	4a52      	ldr	r2, [pc, #328]	; (8005090 <_printf_i+0x21c>)
 8004f48:	9203      	str	r2, [sp, #12]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	6821      	ldr	r1, [r4, #0]
 8004f4e:	ca20      	ldmia	r2!, {r5}
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	0608      	lsls	r0, r1, #24
 8004f54:	d550      	bpl.n	8004ff8 <_printf_i+0x184>
 8004f56:	07cb      	lsls	r3, r1, #31
 8004f58:	d502      	bpl.n	8004f60 <_printf_i+0xec>
 8004f5a:	2320      	movs	r3, #32
 8004f5c:	4319      	orrs	r1, r3
 8004f5e:	6021      	str	r1, [r4, #0]
 8004f60:	2710      	movs	r7, #16
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	d103      	bne.n	8004f6e <_printf_i+0xfa>
 8004f66:	2320      	movs	r3, #32
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	439a      	bics	r2, r3
 8004f6c:	6022      	str	r2, [r4, #0]
 8004f6e:	0023      	movs	r3, r4
 8004f70:	2200      	movs	r2, #0
 8004f72:	3343      	adds	r3, #67	; 0x43
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	60a3      	str	r3, [r4, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	db03      	blt.n	8004f86 <_printf_i+0x112>
 8004f7e:	2204      	movs	r2, #4
 8004f80:	6821      	ldr	r1, [r4, #0]
 8004f82:	4391      	bics	r1, r2
 8004f84:	6021      	str	r1, [r4, #0]
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	d102      	bne.n	8004f90 <_printf_i+0x11c>
 8004f8a:	9e04      	ldr	r6, [sp, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00c      	beq.n	8004faa <_printf_i+0x136>
 8004f90:	9e04      	ldr	r6, [sp, #16]
 8004f92:	0028      	movs	r0, r5
 8004f94:	0039      	movs	r1, r7
 8004f96:	f7fb f947 	bl	8000228 <__aeabi_uidivmod>
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	3e01      	subs	r6, #1
 8004f9e:	5c5b      	ldrb	r3, [r3, r1]
 8004fa0:	7033      	strb	r3, [r6, #0]
 8004fa2:	002b      	movs	r3, r5
 8004fa4:	0005      	movs	r5, r0
 8004fa6:	429f      	cmp	r7, r3
 8004fa8:	d9f3      	bls.n	8004f92 <_printf_i+0x11e>
 8004faa:	2f08      	cmp	r7, #8
 8004fac:	d109      	bne.n	8004fc2 <_printf_i+0x14e>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	07db      	lsls	r3, r3, #31
 8004fb2:	d506      	bpl.n	8004fc2 <_printf_i+0x14e>
 8004fb4:	6863      	ldr	r3, [r4, #4]
 8004fb6:	6922      	ldr	r2, [r4, #16]
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	dc02      	bgt.n	8004fc2 <_printf_i+0x14e>
 8004fbc:	2330      	movs	r3, #48	; 0x30
 8004fbe:	3e01      	subs	r6, #1
 8004fc0:	7033      	strb	r3, [r6, #0]
 8004fc2:	9b04      	ldr	r3, [sp, #16]
 8004fc4:	1b9b      	subs	r3, r3, r6
 8004fc6:	6123      	str	r3, [r4, #16]
 8004fc8:	9b07      	ldr	r3, [sp, #28]
 8004fca:	0021      	movs	r1, r4
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	9805      	ldr	r0, [sp, #20]
 8004fd0:	9b06      	ldr	r3, [sp, #24]
 8004fd2:	aa09      	add	r2, sp, #36	; 0x24
 8004fd4:	f7ff fede 	bl	8004d94 <_printf_common>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d135      	bne.n	8005048 <_printf_i+0x1d4>
 8004fdc:	2001      	movs	r0, #1
 8004fde:	4240      	negs	r0, r0
 8004fe0:	b00b      	add	sp, #44	; 0x2c
 8004fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	6809      	ldr	r1, [r1, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	6022      	str	r2, [r4, #0]
 8004fec:	0022      	movs	r2, r4
 8004fee:	2178      	movs	r1, #120	; 0x78
 8004ff0:	3245      	adds	r2, #69	; 0x45
 8004ff2:	7011      	strb	r1, [r2, #0]
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <_printf_i+0x220>)
 8004ff6:	e7a7      	b.n	8004f48 <_printf_i+0xd4>
 8004ff8:	0648      	lsls	r0, r1, #25
 8004ffa:	d5ac      	bpl.n	8004f56 <_printf_i+0xe2>
 8004ffc:	b2ad      	uxth	r5, r5
 8004ffe:	e7aa      	b.n	8004f56 <_printf_i+0xe2>
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	680d      	ldr	r5, [r1, #0]
 8005004:	1d10      	adds	r0, r2, #4
 8005006:	6949      	ldr	r1, [r1, #20]
 8005008:	6018      	str	r0, [r3, #0]
 800500a:	6813      	ldr	r3, [r2, #0]
 800500c:	062e      	lsls	r6, r5, #24
 800500e:	d501      	bpl.n	8005014 <_printf_i+0x1a0>
 8005010:	6019      	str	r1, [r3, #0]
 8005012:	e002      	b.n	800501a <_printf_i+0x1a6>
 8005014:	066d      	lsls	r5, r5, #25
 8005016:	d5fb      	bpl.n	8005010 <_printf_i+0x19c>
 8005018:	8019      	strh	r1, [r3, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	9e04      	ldr	r6, [sp, #16]
 800501e:	6123      	str	r3, [r4, #16]
 8005020:	e7d2      	b.n	8004fc8 <_printf_i+0x154>
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	1d11      	adds	r1, r2, #4
 8005026:	6019      	str	r1, [r3, #0]
 8005028:	6816      	ldr	r6, [r2, #0]
 800502a:	2100      	movs	r1, #0
 800502c:	0030      	movs	r0, r6
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	f000 f9bc 	bl	80053ac <memchr>
 8005034:	2800      	cmp	r0, #0
 8005036:	d001      	beq.n	800503c <_printf_i+0x1c8>
 8005038:	1b80      	subs	r0, r0, r6
 800503a:	6060      	str	r0, [r4, #4]
 800503c:	6863      	ldr	r3, [r4, #4]
 800503e:	6123      	str	r3, [r4, #16]
 8005040:	2300      	movs	r3, #0
 8005042:	9a04      	ldr	r2, [sp, #16]
 8005044:	7013      	strb	r3, [r2, #0]
 8005046:	e7bf      	b.n	8004fc8 <_printf_i+0x154>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	0032      	movs	r2, r6
 800504c:	9906      	ldr	r1, [sp, #24]
 800504e:	9805      	ldr	r0, [sp, #20]
 8005050:	9d07      	ldr	r5, [sp, #28]
 8005052:	47a8      	blx	r5
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d0c1      	beq.n	8004fdc <_printf_i+0x168>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	079b      	lsls	r3, r3, #30
 800505c:	d415      	bmi.n	800508a <_printf_i+0x216>
 800505e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005060:	68e0      	ldr	r0, [r4, #12]
 8005062:	4298      	cmp	r0, r3
 8005064:	dabc      	bge.n	8004fe0 <_printf_i+0x16c>
 8005066:	0018      	movs	r0, r3
 8005068:	e7ba      	b.n	8004fe0 <_printf_i+0x16c>
 800506a:	0022      	movs	r2, r4
 800506c:	2301      	movs	r3, #1
 800506e:	9906      	ldr	r1, [sp, #24]
 8005070:	9805      	ldr	r0, [sp, #20]
 8005072:	9e07      	ldr	r6, [sp, #28]
 8005074:	3219      	adds	r2, #25
 8005076:	47b0      	blx	r6
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d0af      	beq.n	8004fdc <_printf_i+0x168>
 800507c:	3501      	adds	r5, #1
 800507e:	68e3      	ldr	r3, [r4, #12]
 8005080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	42ab      	cmp	r3, r5
 8005086:	dcf0      	bgt.n	800506a <_printf_i+0x1f6>
 8005088:	e7e9      	b.n	800505e <_printf_i+0x1ea>
 800508a:	2500      	movs	r5, #0
 800508c:	e7f7      	b.n	800507e <_printf_i+0x20a>
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	08005539 	.word	0x08005539
 8005094:	0800554a 	.word	0x0800554a

08005098 <_sbrk_r>:
 8005098:	2300      	movs	r3, #0
 800509a:	b570      	push	{r4, r5, r6, lr}
 800509c:	4d06      	ldr	r5, [pc, #24]	; (80050b8 <_sbrk_r+0x20>)
 800509e:	0004      	movs	r4, r0
 80050a0:	0008      	movs	r0, r1
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	f7fb ffc8 	bl	8001038 <_sbrk>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d103      	bne.n	80050b4 <_sbrk_r+0x1c>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d000      	beq.n	80050b4 <_sbrk_r+0x1c>
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	bd70      	pop	{r4, r5, r6, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	200001fc 	.word	0x200001fc

080050bc <__sread>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	000c      	movs	r4, r1
 80050c0:	250e      	movs	r5, #14
 80050c2:	5f49      	ldrsh	r1, [r1, r5]
 80050c4:	f000 f98e 	bl	80053e4 <_read_r>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	db03      	blt.n	80050d4 <__sread+0x18>
 80050cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050ce:	181b      	adds	r3, r3, r0
 80050d0:	6563      	str	r3, [r4, #84]	; 0x54
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	4a02      	ldr	r2, [pc, #8]	; (80050e0 <__sread+0x24>)
 80050d8:	4013      	ands	r3, r2
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	e7f9      	b.n	80050d2 <__sread+0x16>
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	ffffefff 	.word	0xffffefff

080050e4 <__swrite>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	001f      	movs	r7, r3
 80050e8:	898b      	ldrh	r3, [r1, #12]
 80050ea:	0005      	movs	r5, r0
 80050ec:	000c      	movs	r4, r1
 80050ee:	0016      	movs	r6, r2
 80050f0:	05db      	lsls	r3, r3, #23
 80050f2:	d505      	bpl.n	8005100 <__swrite+0x1c>
 80050f4:	230e      	movs	r3, #14
 80050f6:	5ec9      	ldrsh	r1, [r1, r3]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2302      	movs	r3, #2
 80050fc:	f000 f942 	bl	8005384 <_lseek_r>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <__swrite+0x34>)
 8005104:	0028      	movs	r0, r5
 8005106:	4013      	ands	r3, r2
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	0032      	movs	r2, r6
 800510c:	230e      	movs	r3, #14
 800510e:	5ee1      	ldrsh	r1, [r4, r3]
 8005110:	003b      	movs	r3, r7
 8005112:	f000 f875 	bl	8005200 <_write_r>
 8005116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005118:	ffffefff 	.word	0xffffefff

0800511c <__sseek>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	000c      	movs	r4, r1
 8005120:	250e      	movs	r5, #14
 8005122:	5f49      	ldrsh	r1, [r1, r5]
 8005124:	f000 f92e 	bl	8005384 <_lseek_r>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	1c42      	adds	r2, r0, #1
 800512c:	d103      	bne.n	8005136 <__sseek+0x1a>
 800512e:	4a05      	ldr	r2, [pc, #20]	; (8005144 <__sseek+0x28>)
 8005130:	4013      	ands	r3, r2
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	2280      	movs	r2, #128	; 0x80
 8005138:	0152      	lsls	r2, r2, #5
 800513a:	4313      	orrs	r3, r2
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	6560      	str	r0, [r4, #84]	; 0x54
 8005140:	e7f8      	b.n	8005134 <__sseek+0x18>
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	ffffefff 	.word	0xffffefff

08005148 <__sclose>:
 8005148:	b510      	push	{r4, lr}
 800514a:	230e      	movs	r3, #14
 800514c:	5ec9      	ldrsh	r1, [r1, r3]
 800514e:	f000 f8e3 	bl	8005318 <_close_r>
 8005152:	bd10      	pop	{r4, pc}

08005154 <__swbuf_r>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	0005      	movs	r5, r0
 8005158:	000e      	movs	r6, r1
 800515a:	0014      	movs	r4, r2
 800515c:	2800      	cmp	r0, #0
 800515e:	d004      	beq.n	800516a <__swbuf_r+0x16>
 8005160:	6983      	ldr	r3, [r0, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <__swbuf_r+0x16>
 8005166:	f7ff faf1 	bl	800474c <__sinit>
 800516a:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <__swbuf_r+0xa0>)
 800516c:	429c      	cmp	r4, r3
 800516e:	d12e      	bne.n	80051ce <__swbuf_r+0x7a>
 8005170:	686c      	ldr	r4, [r5, #4]
 8005172:	69a3      	ldr	r3, [r4, #24]
 8005174:	60a3      	str	r3, [r4, #8]
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	071b      	lsls	r3, r3, #28
 800517a:	d532      	bpl.n	80051e2 <__swbuf_r+0x8e>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d02f      	beq.n	80051e2 <__swbuf_r+0x8e>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6922      	ldr	r2, [r4, #16]
 8005186:	b2f7      	uxtb	r7, r6
 8005188:	1a98      	subs	r0, r3, r2
 800518a:	6963      	ldr	r3, [r4, #20]
 800518c:	b2f6      	uxtb	r6, r6
 800518e:	4283      	cmp	r3, r0
 8005190:	dc05      	bgt.n	800519e <__swbuf_r+0x4a>
 8005192:	0021      	movs	r1, r4
 8005194:	0028      	movs	r0, r5
 8005196:	f7ff fa37 	bl	8004608 <_fflush_r>
 800519a:	2800      	cmp	r0, #0
 800519c:	d127      	bne.n	80051ee <__swbuf_r+0x9a>
 800519e:	68a3      	ldr	r3, [r4, #8]
 80051a0:	3001      	adds	r0, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	60a3      	str	r3, [r4, #8]
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	6022      	str	r2, [r4, #0]
 80051ac:	701f      	strb	r7, [r3, #0]
 80051ae:	6963      	ldr	r3, [r4, #20]
 80051b0:	4283      	cmp	r3, r0
 80051b2:	d004      	beq.n	80051be <__swbuf_r+0x6a>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	07db      	lsls	r3, r3, #31
 80051b8:	d507      	bpl.n	80051ca <__swbuf_r+0x76>
 80051ba:	2e0a      	cmp	r6, #10
 80051bc:	d105      	bne.n	80051ca <__swbuf_r+0x76>
 80051be:	0021      	movs	r1, r4
 80051c0:	0028      	movs	r0, r5
 80051c2:	f7ff fa21 	bl	8004608 <_fflush_r>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d111      	bne.n	80051ee <__swbuf_r+0x9a>
 80051ca:	0030      	movs	r0, r6
 80051cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <__swbuf_r+0xa4>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d101      	bne.n	80051d8 <__swbuf_r+0x84>
 80051d4:	68ac      	ldr	r4, [r5, #8]
 80051d6:	e7cc      	b.n	8005172 <__swbuf_r+0x1e>
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <__swbuf_r+0xa8>)
 80051da:	429c      	cmp	r4, r3
 80051dc:	d1c9      	bne.n	8005172 <__swbuf_r+0x1e>
 80051de:	68ec      	ldr	r4, [r5, #12]
 80051e0:	e7c7      	b.n	8005172 <__swbuf_r+0x1e>
 80051e2:	0021      	movs	r1, r4
 80051e4:	0028      	movs	r0, r5
 80051e6:	f000 f81f 	bl	8005228 <__swsetup_r>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d0c9      	beq.n	8005182 <__swbuf_r+0x2e>
 80051ee:	2601      	movs	r6, #1
 80051f0:	4276      	negs	r6, r6
 80051f2:	e7ea      	b.n	80051ca <__swbuf_r+0x76>
 80051f4:	080054e8 	.word	0x080054e8
 80051f8:	08005508 	.word	0x08005508
 80051fc:	080054c8 	.word	0x080054c8

08005200 <_write_r>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	0004      	movs	r4, r0
 8005204:	0008      	movs	r0, r1
 8005206:	0011      	movs	r1, r2
 8005208:	001a      	movs	r2, r3
 800520a:	2300      	movs	r3, #0
 800520c:	4d05      	ldr	r5, [pc, #20]	; (8005224 <_write_r+0x24>)
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	f7fb fec9 	bl	8000fa6 <_write>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d103      	bne.n	8005220 <_write_r+0x20>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d000      	beq.n	8005220 <_write_r+0x20>
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	bd70      	pop	{r4, r5, r6, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	200001fc 	.word	0x200001fc

08005228 <__swsetup_r>:
 8005228:	4b37      	ldr	r3, [pc, #220]	; (8005308 <__swsetup_r+0xe0>)
 800522a:	b570      	push	{r4, r5, r6, lr}
 800522c:	681d      	ldr	r5, [r3, #0]
 800522e:	0006      	movs	r6, r0
 8005230:	000c      	movs	r4, r1
 8005232:	2d00      	cmp	r5, #0
 8005234:	d005      	beq.n	8005242 <__swsetup_r+0x1a>
 8005236:	69ab      	ldr	r3, [r5, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <__swsetup_r+0x1a>
 800523c:	0028      	movs	r0, r5
 800523e:	f7ff fa85 	bl	800474c <__sinit>
 8005242:	4b32      	ldr	r3, [pc, #200]	; (800530c <__swsetup_r+0xe4>)
 8005244:	429c      	cmp	r4, r3
 8005246:	d10f      	bne.n	8005268 <__swsetup_r+0x40>
 8005248:	686c      	ldr	r4, [r5, #4]
 800524a:	230c      	movs	r3, #12
 800524c:	5ee2      	ldrsh	r2, [r4, r3]
 800524e:	b293      	uxth	r3, r2
 8005250:	0711      	lsls	r1, r2, #28
 8005252:	d42d      	bmi.n	80052b0 <__swsetup_r+0x88>
 8005254:	06d9      	lsls	r1, r3, #27
 8005256:	d411      	bmi.n	800527c <__swsetup_r+0x54>
 8005258:	2309      	movs	r3, #9
 800525a:	2001      	movs	r0, #1
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	3337      	adds	r3, #55	; 0x37
 8005260:	4313      	orrs	r3, r2
 8005262:	81a3      	strh	r3, [r4, #12]
 8005264:	4240      	negs	r0, r0
 8005266:	bd70      	pop	{r4, r5, r6, pc}
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <__swsetup_r+0xe8>)
 800526a:	429c      	cmp	r4, r3
 800526c:	d101      	bne.n	8005272 <__swsetup_r+0x4a>
 800526e:	68ac      	ldr	r4, [r5, #8]
 8005270:	e7eb      	b.n	800524a <__swsetup_r+0x22>
 8005272:	4b28      	ldr	r3, [pc, #160]	; (8005314 <__swsetup_r+0xec>)
 8005274:	429c      	cmp	r4, r3
 8005276:	d1e8      	bne.n	800524a <__swsetup_r+0x22>
 8005278:	68ec      	ldr	r4, [r5, #12]
 800527a:	e7e6      	b.n	800524a <__swsetup_r+0x22>
 800527c:	075b      	lsls	r3, r3, #29
 800527e:	d513      	bpl.n	80052a8 <__swsetup_r+0x80>
 8005280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005282:	2900      	cmp	r1, #0
 8005284:	d008      	beq.n	8005298 <__swsetup_r+0x70>
 8005286:	0023      	movs	r3, r4
 8005288:	3344      	adds	r3, #68	; 0x44
 800528a:	4299      	cmp	r1, r3
 800528c:	d002      	beq.n	8005294 <__swsetup_r+0x6c>
 800528e:	0030      	movs	r0, r6
 8005290:	f7ff fb76 	bl	8004980 <_free_r>
 8005294:	2300      	movs	r3, #0
 8005296:	6363      	str	r3, [r4, #52]	; 0x34
 8005298:	2224      	movs	r2, #36	; 0x24
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	4393      	bics	r3, r2
 800529e:	81a3      	strh	r3, [r4, #12]
 80052a0:	2300      	movs	r3, #0
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	2308      	movs	r3, #8
 80052aa:	89a2      	ldrh	r2, [r4, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	81a3      	strh	r3, [r4, #12]
 80052b0:	6923      	ldr	r3, [r4, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <__swsetup_r+0xa6>
 80052b6:	21a0      	movs	r1, #160	; 0xa0
 80052b8:	2280      	movs	r2, #128	; 0x80
 80052ba:	89a3      	ldrh	r3, [r4, #12]
 80052bc:	0089      	lsls	r1, r1, #2
 80052be:	0092      	lsls	r2, r2, #2
 80052c0:	400b      	ands	r3, r1
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <__swsetup_r+0xa6>
 80052c6:	0021      	movs	r1, r4
 80052c8:	0030      	movs	r0, r6
 80052ca:	f7ff fb0b 	bl	80048e4 <__smakebuf_r>
 80052ce:	220c      	movs	r2, #12
 80052d0:	5ea3      	ldrsh	r3, [r4, r2]
 80052d2:	2001      	movs	r0, #1
 80052d4:	001a      	movs	r2, r3
 80052d6:	b299      	uxth	r1, r3
 80052d8:	4002      	ands	r2, r0
 80052da:	4203      	tst	r3, r0
 80052dc:	d00f      	beq.n	80052fe <__swsetup_r+0xd6>
 80052de:	2200      	movs	r2, #0
 80052e0:	60a2      	str	r2, [r4, #8]
 80052e2:	6962      	ldr	r2, [r4, #20]
 80052e4:	4252      	negs	r2, r2
 80052e6:	61a2      	str	r2, [r4, #24]
 80052e8:	2000      	movs	r0, #0
 80052ea:	6922      	ldr	r2, [r4, #16]
 80052ec:	4282      	cmp	r2, r0
 80052ee:	d1ba      	bne.n	8005266 <__swsetup_r+0x3e>
 80052f0:	060a      	lsls	r2, r1, #24
 80052f2:	d5b8      	bpl.n	8005266 <__swsetup_r+0x3e>
 80052f4:	2240      	movs	r2, #64	; 0x40
 80052f6:	4313      	orrs	r3, r2
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	3801      	subs	r0, #1
 80052fc:	e7b3      	b.n	8005266 <__swsetup_r+0x3e>
 80052fe:	0788      	lsls	r0, r1, #30
 8005300:	d400      	bmi.n	8005304 <__swsetup_r+0xdc>
 8005302:	6962      	ldr	r2, [r4, #20]
 8005304:	60a2      	str	r2, [r4, #8]
 8005306:	e7ef      	b.n	80052e8 <__swsetup_r+0xc0>
 8005308:	2000000c 	.word	0x2000000c
 800530c:	080054e8 	.word	0x080054e8
 8005310:	08005508 	.word	0x08005508
 8005314:	080054c8 	.word	0x080054c8

08005318 <_close_r>:
 8005318:	2300      	movs	r3, #0
 800531a:	b570      	push	{r4, r5, r6, lr}
 800531c:	4d06      	ldr	r5, [pc, #24]	; (8005338 <_close_r+0x20>)
 800531e:	0004      	movs	r4, r0
 8005320:	0008      	movs	r0, r1
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	f7fb fe5b 	bl	8000fde <_close>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d103      	bne.n	8005334 <_close_r+0x1c>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d000      	beq.n	8005334 <_close_r+0x1c>
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	bd70      	pop	{r4, r5, r6, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	200001fc 	.word	0x200001fc

0800533c <_fstat_r>:
 800533c:	2300      	movs	r3, #0
 800533e:	b570      	push	{r4, r5, r6, lr}
 8005340:	4d06      	ldr	r5, [pc, #24]	; (800535c <_fstat_r+0x20>)
 8005342:	0004      	movs	r4, r0
 8005344:	0008      	movs	r0, r1
 8005346:	0011      	movs	r1, r2
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	f7fb fe52 	bl	8000ff2 <_fstat>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	d103      	bne.n	800535a <_fstat_r+0x1e>
 8005352:	682b      	ldr	r3, [r5, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d000      	beq.n	800535a <_fstat_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	200001fc 	.word	0x200001fc

08005360 <_isatty_r>:
 8005360:	2300      	movs	r3, #0
 8005362:	b570      	push	{r4, r5, r6, lr}
 8005364:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_isatty_r+0x20>)
 8005366:	0004      	movs	r4, r0
 8005368:	0008      	movs	r0, r1
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	f7fb fe4f 	bl	800100e <_isatty>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d103      	bne.n	800537c <_isatty_r+0x1c>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d000      	beq.n	800537c <_isatty_r+0x1c>
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	200001fc 	.word	0x200001fc

08005384 <_lseek_r>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	0004      	movs	r4, r0
 8005388:	0008      	movs	r0, r1
 800538a:	0011      	movs	r1, r2
 800538c:	001a      	movs	r2, r3
 800538e:	2300      	movs	r3, #0
 8005390:	4d05      	ldr	r5, [pc, #20]	; (80053a8 <_lseek_r+0x24>)
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fb fe44 	bl	8001020 <_lseek>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d103      	bne.n	80053a4 <_lseek_r+0x20>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d000      	beq.n	80053a4 <_lseek_r+0x20>
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	200001fc 	.word	0x200001fc

080053ac <memchr>:
 80053ac:	b2c9      	uxtb	r1, r1
 80053ae:	1882      	adds	r2, r0, r2
 80053b0:	4290      	cmp	r0, r2
 80053b2:	d101      	bne.n	80053b8 <memchr+0xc>
 80053b4:	2000      	movs	r0, #0
 80053b6:	4770      	bx	lr
 80053b8:	7803      	ldrb	r3, [r0, #0]
 80053ba:	428b      	cmp	r3, r1
 80053bc:	d0fb      	beq.n	80053b6 <memchr+0xa>
 80053be:	3001      	adds	r0, #1
 80053c0:	e7f6      	b.n	80053b0 <memchr+0x4>
	...

080053c4 <__malloc_lock>:
 80053c4:	b510      	push	{r4, lr}
 80053c6:	4802      	ldr	r0, [pc, #8]	; (80053d0 <__malloc_lock+0xc>)
 80053c8:	f7ff fa61 	bl	800488e <__retarget_lock_acquire_recursive>
 80053cc:	bd10      	pop	{r4, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	200001f4 	.word	0x200001f4

080053d4 <__malloc_unlock>:
 80053d4:	b510      	push	{r4, lr}
 80053d6:	4802      	ldr	r0, [pc, #8]	; (80053e0 <__malloc_unlock+0xc>)
 80053d8:	f7ff fa5a 	bl	8004890 <__retarget_lock_release_recursive>
 80053dc:	bd10      	pop	{r4, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	200001f4 	.word	0x200001f4

080053e4 <_read_r>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	0004      	movs	r4, r0
 80053e8:	0008      	movs	r0, r1
 80053ea:	0011      	movs	r1, r2
 80053ec:	001a      	movs	r2, r3
 80053ee:	2300      	movs	r3, #0
 80053f0:	4d05      	ldr	r5, [pc, #20]	; (8005408 <_read_r+0x24>)
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fb fdba 	bl	8000f6c <_read>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d103      	bne.n	8005404 <_read_r+0x20>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d000      	beq.n	8005404 <_read_r+0x20>
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	200001fc 	.word	0x200001fc

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
